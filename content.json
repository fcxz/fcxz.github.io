{"meta":{"title":"Linux命令手册 | 风尘","subtitle":"一个逐渐完善中的Linux命令手册站点!","description":"一个逐渐完善中的Linux命令手册站点!","author":"风尘","url":"http://man.fcwalkers.com"},"pages":[{"title":"","date":"2022-03-04T06:53:02.853Z","updated":"2019-03-22T09:11:34.000Z","comments":true,"path":"404.html","permalink":"http://man.fcwalkers.com/404.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-04T06:53:02.956Z","updated":"2019-03-22T09:11:34.000Z","comments":false,"path":"tags/index.html","permalink":"http://man.fcwalkers.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"xargs 命令[54]","slug":"xargs命令_54","date":"2022-08-15T16:00:00.000Z","updated":"2022-08-23T05:57:49.617Z","comments":true,"path":"xargs命令_54.html","link":"","permalink":"http://man.fcwalkers.com/xargs%E5%91%BD%E4%BB%A4_54.html","excerpt":"","text":"xargs是给命令传递参数的一个过滤器，可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据，并且以空白符或换行符作为分隔符。 选项与参数：123456789101112-0 : 如果输入的 stdin 含有特殊字符（如 ` \\ 空白符），该参数可以将它们还原成一般字符。-a : 从文件中读取数据代替标准输入。-E : 设置一个结束符，当 xargs 分析到这个字符时就会停止。-p : 执行每个指令的 argument 时，都会询问一次用户。-n : 后面加次数，表示每次命令执行时使用几个参数。-t : 在每次命令执行前先打印标准错误输出。-I : 将从标准输入读取到的参数名称替换成指定的符号（如&#123;&#125;）。-r : 当标准输入为空的时候则停止执行。-L : 从标准输入一次读取多少行给 command 命令。-d : 设置分隔符，默认 xargs 分隔符是回车，argument 的分隔符是空格，这里是修改 xargs 的分隔符。-s : 设置每个命令行最大字符数，指 xargs 后面的命令（包含命令和参数）。-x : 配合 -s 使用，如果超出限制则退出。 示例 打印每个用户的信息 1234567891011121314151617# 指定 -n 只取第一个参数[root@study ~]# cut -d &#x27;:&#x27; -f 1 /etc/passwd | xargs -n 1 iduid=0(root) gid=0(root) groups=0(root)uid=1(bin) gid=1(bin) groups=1(bin)uid=2(daemon) gid=2(daemon) groups=2(daemon)uid=3(adm) gid=4(adm) groups=4(adm)uid=4(lp) gid=7(lp) groups=7(lp)uid=5(sync) gid=0(root) groups=0(root)...省略# 指定 -E 选项，遇到 sync 字符就结束[root@study ~]# cut -d &#x27;:&#x27; -f 1 /etc/passwd | xargs -E &#x27;sync&#x27; -n 1 iduid=0(root) gid=0(root) groups=0(root)uid=1(bin) gid=1(bin) groups=1(bin)uid=2(daemon) gid=2(daemon) groups=2(daemon)uid=3(adm) gid=4(adm) groups=4(adm) 查找特殊权限文件名并列出详细信息 1234567[root@study ~]# find /usr/sbin/ -perm /7000 | xargs ls -l-rwxr-sr-x. 1 root root 11224 Oct 13 2020 /usr/sbin/netreport-rwsr-xr-x. 1 root root 11232 Apr 1 2020 /usr/sbin/pam_timestamp_check-rwxr-sr-x. 1 root postdrop 218560 Apr 1 2020 /usr/sbin/postdrop-rwxr-sr-x. 1 root postdrop 264128 Apr 1 2020 /usr/sbin/postqueue-rwsr-xr-x. 1 root root 36272 Apr 1 2020 /usr/sbin/unix_chkpwd-rwsr-xr-x. 1 root root 11296 Oct 13 2020 /usr/sbin/usernetctl 打印文件内容 123456789101112131415161718[root@study ~]# cat &gt; test.txt &lt;&lt; EOFa b c d e f gh i j k l m no p qr s tu v w x y zEOF[root@study ~]# cat test.txt | xargs -n3a b cd e fg h ij k lm n op q rs t uv w xy z","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"打印","slug":"打印","permalink":"http://man.fcwalkers.com/tags/%E6%89%93%E5%8D%B0/"}]},{"title":"seq 命令[53]","slug":"seq命令_53","date":"2022-08-07T16:00:00.000Z","updated":"2022-08-23T03:30:29.888Z","comments":true,"path":"seq命令_53.html","link":"","permalink":"http://man.fcwalkers.com/seq%E5%91%BD%E4%BB%A4_53.html","excerpt":"","text":"打印一连串的数字，可以指定开始值、增量值以及结束值。 语法seq [选项] [开始] [增量] 结束 如果开始和增量省略，默认值为1。如果只给定其中两项，则默认增量值为1。 选项与参数：123-f : 以 printf 函数的浮点型格式化显示（默认是 &#x27;％g&#x27;），常用格式为： -f &#x27;%[正负符号] [填充符号] [显示位数]&#x27;。该选项不能与 -w 同时使用。-s : 指定分割符（默认是 &#x27;\\n&#x27;）-w : 左侧用 0 填充 示例 打印序列数字 12345678910111213141516171819202122232425# 打印 1 到 10 数字[root@study ~]# seq 1 1012345678910# 打印 10 到 1 数字[root@study ~]# seq 10 -1 110987654321 指定分割符为逗号 12[root@study ~]# seq -s &#x27;,&#x27; 1 101,2,3,4,5,6,7,8,9,10 指定填充符号和位数 1234567# 用 0 填充 3 位，增量步长为 2[root@study ~]# seq -f &#x27;%03g&#x27; 1 2 10001003005007009","categories":[],"tags":[{"name":"数字","slug":"数字","permalink":"http://man.fcwalkers.com/tags/%E6%95%B0%E5%AD%97/"},{"name":"打印","slug":"打印","permalink":"http://man.fcwalkers.com/tags/%E6%89%93%E5%8D%B0/"}]},{"title":"rsync 命令[52]","slug":"rsync命令_52","date":"2022-07-24T16:00:00.000Z","updated":"2022-07-26T08:58:44.445Z","comments":true,"path":"rsync命令_52.html","link":"","permalink":"http://man.fcwalkers.com/rsync%E5%91%BD%E4%BB%A4_52.html","excerpt":"","text":"rsync是一个支持本地与远程计算机之间文件同步的工具，也支持两个本地目录间文件同步。默认使用“快速检查”算法查找文件大小或者上次修改时间被改变的文件进行传输。它支持 语法有两种方式通过rsync与远程系统联系，一是使用一个远程的shell程序（如ssh或rsh），另一种方法是直接通过TCP连接一个rsync守护进程。远程shell通过:符号分割本地和远程地址，守护进程通过::符号分割或者使用rsync://方式。 本地： rsync [OPTION...] SRC... [DEST] 远程shell： Pullrsync [OPTION...] [USER@]HOST:SRC... [DEST] Pushrsync [OPTION...] SRC... [USER@]HOST:DEST 守护进程： Pullrsync [OPTION...] [USER@]HOST::SRC... [DEST]rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST] Pushrsync [OPTION...] SRC... [USER@]HOST::DESTrsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST 选项与参数：123456789101112131415161718192021222324-v : 显示传输信息（默认是无任何信息输出）（常用）-q : 减少信息输出，尤其是远程服务器信息-I : 不跳过文件大小和更新时间相同的文件（关闭“快速检查”算法，所有文件都传输）--size-only : 修改“快速检查”算法，仅考虑文件大小条件，不考虑文件时间是否被修改-a : 归档模式，表示希望递归并希望保留几乎所有内容的快速方式，相当于使用 &#x27;-rlptgoD&#x27; 选项（常用）-r : 递归复制文件夹-z : 对备份文件传输时压缩处理--compress-level=NUM : 文件压缩级别-R : 使用相对路径-b : 备份文件，如果目标路径已存在则会将旧文件重命名为 filename~ ，可以结合 --backup-dir 和 --suffix 选项使用--backup-dir=DIR : 将旧备份文件放在指定目录下--suffix=SUFFIX : 定义备份文件名的后缀-u : 跳过已经存在的文件，仅更新未存在的文件-l : 保留软链接-L : 当遇到软链接时，复制它们指向的文件。-H : 保留硬链接-p : 保留权限-o : 保留拥有者-g : 保留分组--remove-source-files : 删除 SRC 中的文件（不包括目录）--delete : 删除 DEST 中 SRC 不存在的文件--exclude=PATTERN : 排除不需要的文件--chown=USER:GROUP : 强制更改文件所有者和分组--timeout=TIMEOUT : 传输超时时间（默认 0，单位秒） 示例 本地同步 12# 同步 public 目录下文件到 out 目录下，并且删除 out 目录中 public 里不存在的文件[root@study ~] rsync -azv --delete public/ out/ 相对路径-R 12345# 远程机器将创建一个 /tmp/foo/bar/baz.c 的文件[root@study ~] rsync -avR /foo/bar/baz.c /tmp/# 远程机器仅在 /tmp/ 目录创建一个 baz.c 文件[root@study ~] rsync -av /foo/bar/baz.c /tmp/ 文件备份 12345678910111213141516# 查看当前目录下文件[root@study ~] ls -l a.txt b.txt # 备份 a.txt 文件到 backup 目录，同时设置旧文件名前缀为 0725，旧文件路径为 older[root@study ~] rsync -b a.txt --suffix=0725 --backup-dir=older backup/# 查看备份结果，因为第一次 backup 目录下没有文件所以 older 目录为空[root@study ~] ls backup/ &amp;&amp; ls backup/oldera.txt# 继续执行备份文件命令[root@study ~] rsync -b a.txt --suffix=0725 --backup-dir=older backup/# 查看备份文件结果，因为第二次执行 backup 目录下已经存在目录，所以会将文件重命名后放入 older 目录[root@study ~] ls backup/ &amp;&amp; ls backup/oldera.txta.txt0725","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"同步","slug":"同步","permalink":"http://man.fcwalkers.com/tags/%E5%90%8C%E6%AD%A5/"},{"name":"远程同步","slug":"远程同步","permalink":"http://man.fcwalkers.com/tags/%E8%BF%9C%E7%A8%8B%E5%90%8C%E6%AD%A5/"}]},{"title":"complete 命令[51]","slug":"complete命令_51","date":"2022-06-16T16:00:00.000Z","updated":"2022-07-25T09:34:32.915Z","comments":true,"path":"complete命令_51.html","link":"","permalink":"http://man.fcwalkers.com/complete%E5%91%BD%E4%BB%A4_51.html","excerpt":"","text":"complete是一个bash内置命令，用于指定对每个名称的参数如何补全。它也是bash自动按两次TAB实现自动补全调用的命令。 选项与参数：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354-a : 别名-b : 内置命令-c : 可用命令-d : 目录名-f : 文件名（包括目录名）-e : 环境变量-v : 变量名-u : 用户名-g : 群组名-j : Job 名-k : Bash 保留关键字-s : 服务名-o 排版 : 控制着生成补全条目其他几个排版选项： bashdefault 如果没有匹配的内容生成，则使用 bash 默认的其余补全 default 如果没有匹配的内容生成，则使用 readline 默认文件名补全 dirnames 如果没有匹配的内容生成，则使用目录名称补全 filenames 匹配内容会生成文件名，因此它可以执行任何特定于文件名的处理(比如在目录名中添加斜杠、引用特殊字符或取消尾部空格)。用于与 shell 函数一起使用 nospace 匹配内容在行尾不追加空格 plusdirs 匹配内容生成后，尝试匹配目录名并追加到其他动作之后-A 动作 : 动作有以下可选值： alias 相当于 -a 选项. arrayvar 数组变量 binding 快捷键绑定名 builtin 相当于 -b 选项. command 相当于 -c 选项. directory 相当于 -d 选项. disabled 被禁用的内建命令. enabled 被启用的内建命令. export 相当于 -c 选项. file 相当于 -f 选项. function 所有函数名 group 相当于 -g 选项. helptopic 内建命令 help 支持的帮助主题 hostname 获取 HOSTFILE 变量指定的文件内的主机名，默认 /etc/hosts 文件 job 相当于 -j 选项. keyword 相当于 -k 选项. running 如果 job 是活跃的，显示运行中的 Jobs service 相当于 -s 选项. setopt 内建命令 set 选项 -o 的可用参数 shopt 内建命令 shopt 可接受的选项名 signal 信号名 stopped 如果 job 是活跃的，显示停止的 Jobs. user 相当于 -u 选项. variable 相当于 -v 选项.-C 命令 : 在子程序中执行命令，它的输出被用于可能的补全-F 函数 : 在当前程序中执行函数，执行完成后，可能补全的内容被接收到 COMPREPLY 数组变量中-P 前缀 : 在已匹配结果前添加前缀-S 后缀 : 在已匹配结果后追加后缀-G globpat : 路径扩展名模式，globpat进行扩展以生成可能的补全内容-W wordlist : 使用变量 IFS 设定的字符作为分割符，分割 wordlist 并作为可能补全的内容-X filterpat : filterpat 是一个模式用于路径名扩展，它作用于通过前面的选项和参数生成的补全列表，并把每个与过滤模式匹配的条目删除，模式中前导的叹号表示否定，这时会删除与过滤模式不匹配的条目 相关变量 变量名称 说明 变量类型 COMP_CWORD 存放当前命令行中输入的所有单词的数组 Array COMP_WORDS 当前输入的单词在COMP_WORDS中的索引 Int COMPREPLY 由命令补全功能调用的 shell 函数产生的。记录候选补全结果的数组 Array COMP_LINE 当前命令行输入字符 String COMP_POINT 光标在当前命令行的位置 Int COMP_WORDBREAKS 单词之间分割符 String HOSTFILE 存储主机名的文件格式与/etc/hosts文件相同，如果定义该变量但是没有赋值，将尝试读取/etc/hosts文件 String FIGNORE 一个冒号分隔的后缀名列表，一个后缀满足其中之一的文件名被排除在匹配的文件名之外。 String GLOBIGNORE 一个冒号分隔的模式列表，定义了路径名扩展时要忽略的文件名集合。如果一个文件名与路径扩展模式匹配，同时匹配GLOBIGNORE中的一个模式时，它被从匹配列表中删除。 String 案例1) 新建一个命令文件 printv.sh 1234#!/bin/bash# 打印第一个参数echo $1 2) 将脚本文件赋予执行权限 1[root@study]# chmod +x printv.sh 3) 创建命令提示脚本 printv_completion.bash 12345678#!/bin/bash_printv_function()&#123; local cur=$&#123;COMP_WORDS[COMP_CWORD]&#125; COMPREPLY=( $(compgen -W &quot;help variable other&quot; -- $cur) )&#125;complete -F _printv_function printv 4) 将命令提示脚本赋权 1234# 赋予执行权限[root@study]# chmod +x printv_completion.bash# 加载到当前环境[root@study]# source printv_completion.bash 该文件通常放在/etc/bash_completion.d 5) 测试命令提示功能 123# 输出 printv 命令，按连两下 Tab 键 将会出现如下提示[root@study]# printv [Tab][Tab]help variable other 相关命令 compgen 命令","categories":[],"tags":[{"name":"Bash","slug":"Bash","permalink":"http://man.fcwalkers.com/tags/Bash/"}]},{"title":"compgen 命令[50]","slug":"compgen命令_50","date":"2022-06-15T16:00:00.000Z","updated":"2022-07-25T09:34:46.050Z","comments":true,"path":"compgen命令_50.html","link":"","permalink":"http://man.fcwalkers.com/compgen%E5%91%BD%E4%BB%A4_50.html","excerpt":"","text":"compgen是一个bash内置命令，可以显示所有可用的命令、别名和函数等。它也是bash自动按两次TAB实现自动补全调用的命令。 选项与参数： 与complete命令选项相同，除了-r与-p选项。 示例 一般用法 compgen [选项] [词语] 123456# 显示系统所有用户名[root@study]# compgen -urootbindaemonadm 查询系统内以ls开头的命令 1234567891011121314151617# -- 表示只生成相关单词的补全结果（有时可省略）[root@study]# compgen -c -- lslslsoflsmodlsipclsinitrdlsmemlsattrlsblklslockslslsloginslsscsilsb_releaselsnslscpu 查询后台 jobs 12345[root@study]# vi# 进入 vi 后，按 ctrl + z，然后使用 -j 选项即可看见 job 名称[1]+ 已停止 vi[root@study]# compgen -jvi 查询被启用的内建命令 1234567[root@study]# compgen -A enabled.:[aliasbgbind 在指定字符中添加前缀 12345# 查看当前目录下文件[root@study]# compgen -W &quot;bc dc ec&quot; -P aabcadcaec","categories":[],"tags":[{"name":"Bash","slug":"Bash","permalink":"http://man.fcwalkers.com/tags/Bash/"}]},{"title":"host 命令[49]","slug":"host命令_49","date":"2021-12-06T16:00:00.000Z","updated":"2022-06-16T07:00:30.694Z","comments":true,"path":"host命令_49.html","link":"","permalink":"http://man.fcwalkers.com/host%E5%91%BD%E4%BB%A4_49.html","excerpt":"","text":"host是一个简单的DNS查询工具，它通常用于正向查询或反向查询。 选项与参数：{name} 是要查询的域名，它也可以是一个点分割的IPv4地址或是一个冒号分割的IPv6地址。[server] 是一个可选参数，它可以是名字服务器的名字或IP地址。指定后可以代替/etc/resolv.conf文件内的名字服务器。 1234567891011-a : 相当于设置 -v 选项，并且要求 host 发送一个查询类型为 ANY 的请求。-C : 将尝试显示来自该区域所有列出的权威名称服务器的区域名称的 SOA 记录。名称服务器列表由为该区域找到的 NS 记录定义。-c : 指定 DNS 查询的类，默认值是 IN 表示互联网。-d : 与 -v 选项作用相同，用来显示详细信息。这两个选项都提供了向后兼容性。在前一个版本，-d 选项会切换到 debug 跟踪；-v 会启用详细输出。-i : 指定反向查询 IPv6 的地址，应该使用 IP6.INT 域名。默认使用 IP6.ARPA。-4 / -6 : 强制使用 IPv4 / IPv6 地址查询。-t : 指定查询类型。如 CNAME, NS, SOA, SIG, KEY, AXFR等。-r : 不使用递归查询。-s : 告诉主机，如果任何服务器响应SERVFAIL响应，则不要将查询发送到下一个名称服务器，这与正常的存根解析程序行为相反。-W : 让主机等待秒数，如果小于1秒将被设置为1秒，如果在指定时间内域名服务器没有给出应答信息则退出。-w : 如果域名服务器没有给出应答信息，则总是等待，直到域名服务器给出应答。 文件 /etc/resolv.conf 查询类型参考DNS查询类型 示例 一般用法 host [选项] &#123;name&#125; [server] 12[root@study]# host man.fcwalkers.comman.fcwalkers.com has address 116.196.64.206 查询邮件类型 12[root@study]]# host -t MX fcwalkers.comfcwalkers.com mail is handled by 10 mx.ym.163.com.","categories":[],"tags":[{"name":"DNS","slug":"DNS","permalink":"http://man.fcwalkers.com/tags/DNS/"}]},{"title":"locale 命令[48]","slug":"locale命令_48","date":"2021-12-05T16:00:00.000Z","updated":"2022-06-16T07:00:21.910Z","comments":true,"path":"locale命令_48.html","link":"","permalink":"http://man.fcwalkers.com/locale%E5%91%BD%E4%BB%A4_48.html","excerpt":"","text":"locale是多语言环境的设置接口，通过标准输出显示当前语言环境或所有语言环境。由ANSI C提供支持。 选项与参数：当无参数调用时，显示当前语言环境设置的每个区域类别。 12345-a : 显示所有有效的语言环境列表。-m : 显示有效的字符映射表(字符集合描述文件)。-c : 显示出语言环境的类别名称（或关键字）及其设置的值。-k : 显示出关键字参数，格式为 &quot;keyword=value&quot;。-v : 显示出额外的信息，与其他选项组合使用。如与 -a 选项一起使用。 文件 /usr/lib/locale/locale-archive 言环境默认归档文件，创建的locale会自动添加进此文件 /usr/share/i18n/locales 语言环境定义文件默认路径 类别locale按照所涉及到的文化传统的各个方面分成12个大类： 类别名称 描述 LC_CTYPE 语言符号及其分类 LC_NUMERIC 数字 LC_COLLATE 比较和排序习惯 LC_TIME 时间显示格式 LC_MONETARY 货币单位 LC_MESSAGES 信息主要是提示信息,错误信息,状态信息,标题,标签,按钮和菜单等 LC_NAME 姓名书写方式 LC_ADDRESS 地址书写方式 LC_TELEPHONE 电话号码书写方式 LC_MEASUREMENT 度量衡表达方式 LC_PAPER 默认纸张尺寸大小 LC_IDENTIFICATION 对locale自身包含信息的概述 示例 一般用法 locale [选项] [关键字|类别] 12345[root@study]# localeLANG=zh_CN.UTF-8LC_CTYPE=&quot;zh_CN.UTF-8&quot;LC_NUMERIC=&quot;zh_CN.UTF-8&quot;...省略 显示当前语言环境字符设置 123[root@study]# locale -c charmapLC_CTYPE # 类别名称UTF-8 # 设置的值 显示当前系统时间环境设置 123[root@study]# locale -ck date_fmtLC_TIME # 类别名称date_fmt=&quot;%Y年 %m月 %d日 %A %H:%M:%S %Z&quot; # 关键字=值","categories":[],"tags":[{"name":"语言环境","slug":"语言环境","permalink":"http://man.fcwalkers.com/tags/%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83/"}]},{"title":"arp 命令[47]","slug":"arp命令_47","date":"2021-10-11T16:00:00.000Z","updated":"2021-10-12T10:39:26.000Z","comments":true,"path":"arp命令_47.html","link":"","permalink":"http://man.fcwalkers.com/arp%E5%91%BD%E4%BB%A4_47.html","excerpt":"","text":"arp命令用于或显示操作系统 IPv4 相邻网络地址的缓存。它也可以用于向缓存表中添加、删除类目。该命令已废弃，建议使用ip neigh命令代替。ARP 是标准的地址解析协议，用于查找 IPv4地址到对应硬件地址之间的动态映射。 模式：arp 不指定模式时，将打印缓存表条目，还可以通过指定硬件地址的类型、接口名或主机地址来限制打印的条目。 arp -d &lt;address&gt; 删除指定地址的 arp 条目。address 需要是一个 IP 地址，如果给定的是主机名，它将在查找 arp 条目之前被解析。此模式需要管理员权限。 arp -s &lt;address&gt; &lt;hw_addr&gt; [flag] 添加一个新 arp 条目。硬件地址(hw_addr)参数格式取决于赖硬件类型即-t选项，默认是 Ethernet 类型的6个字节的16位冒号分割的表示法。添加代理 arp 时，可以为整个子网的代理 arp 指定网络掩码，通过-Ds选项可以执行该操作。flag 是可选项，如果未设置标志为temp，则添加的条目永久存储到 ARP 缓存中。 选项与参数：12345678-v : 显示详细的 ARP 缓冲区条目。-n : 显示数字的地址代替符号类的主机名、端口名或用户名。-H,-t &lt;type&gt; : 当设置或读取 ARP 缓存时，这是个可选参数，用于指定地址类型，默认值为 ether。-a : 使用 BSD 风格格式化输出（没有固定列）。-e : 使用 Linux 风格格式化输出（有固定列）。-D : 使用网络接口的网络掩码地址作为硬件地址添加 arp 条目，通常用于代理 ARP。-i : 指定操作条目的网络接口。-f &lt;filename&gt; : 与 -s 类似，添加条目信息取自指定文件，用于设置条目较多时，批量添加。如果不指定文件名，默认是 /etc/ethers。 示例 一般用法 arp [模式|选项] [标志] 12# 添加临时代理 ARP[root@study]# arp -Ds 140.252.1.29 140.252.1 temp","categories":[],"tags":[{"name":"IP","slug":"IP","permalink":"http://man.fcwalkers.com/tags/IP/"},{"name":"MAC","slug":"MAC","permalink":"http://man.fcwalkers.com/tags/MAC/"},{"name":"ARP","slug":"ARP","permalink":"http://man.fcwalkers.com/tags/ARP/"}]},{"title":"date命令[46]","slug":"date命令_46","date":"2021-04-20T16:00:00.000Z","updated":"2021-04-21T08:33:58.000Z","comments":true,"path":"date命令_46.html","link":"","permalink":"http://man.fcwalkers.com/date%E5%91%BD%E4%BB%A4_46.html","excerpt":"","text":"打印和设置日期或时间。 选项与参数12345678-d,--date=STRING : 显示指定的字符串时间。-f,--file=DATEFILE : 类似 --date 显示文件中的每一行时间。-I[TIMESPEC],--iso-8601[=TIMESPEC] : 输出国际标准 ISO 8601 格式的日期/时间。其中 TIMESPEC 可选值有: &#x27;date&#x27;,&#x27;hours&#x27;, &#x27;minutes&#x27;, &#x27;seconds&#x27;, or &#x27;ns&#x27; (默认为 &#x27;date&#x27;)。-r : 显示文件最后的更新时间(mtime)。-R,--rfc-2822 : 输出 RFC 2822 格式的日期或时间。--rfc-3339=TIMESPEC : 输出 RFC 3339 格式或日期。TIMESPEC=&#x27;date&#x27;, &#x27;seconds&#x27;, or &#x27;ns&#x27;。日期与时间用一个空格分隔。-s,--set=STRING : 通过给定字符串设定日期和时间。-u,--utc : 打印或设置 utc 时间。 格式格式化控制输出，具体含义如下： %% 输出 % 符号%a 本地设置的星期名缩写(如 Sun)%A 本地设置的星期名全名(如 Sunday)%b 本地设置的月名缩写(如 Jan)%B 本地设置的月名全名(如 January)%c 本地设置的日期和时间%C 世纪%d 月中的天%D 日期，相当于 %m/%d/%y。%e 月中的天，以空格填充，相当于 %_d。%F 全日期，相当于%Y-%m-%d。%g 年的ISO周日历最后两位数字。%G 年的ISO周日历，通常只对 %V 有用。%h 相当于 %b%H 24进制小时(01..23)%I 12进制小时(01..12)%j 年中的天数(001..366)%k 24进制小时，以空格填充，相当于 %_H。%l 12进制小时，以空格填充，相当于 %_I。%m 月(01..12)%M 分钟(00..59)%n 换行%N 纳秒(000000000..999999999)%p 本地设置的 AM/PM，不确定输出空白符。%P 与 %p 类似，但是以小写字母输出。%r 本地设置的12进制时间(如：下午 03时51分53秒)%R 24进制显示时间和分钟，相当于 %H:%M。%s 自协调世界时1970年01月01日00时00分以来的秒数%S 秒数(00.60)%t tab%T 24进制显示时间，相当于 %H:%M:%S。%u 周中的天(1..7)，1为星期一。%U 年中的周，周日作为一周的第一天(00..53)。%V ISO周日历，周一作为一周的第一天(01..53)。%w 周中的天(0..6)，0为周日。%W 年中的周，周一作为一周的第一天(00..53)。%x 本地设置的日期表示(如：下午2021年04月21日)%X 本地设置的时间表示(如：下午16时06分23秒)%y 年的最后两位数字%Y 年%z ±hhmm 数值时区(如：0800)%:z ±hh:mm 数值时区(如：08:00)%::z ±hh:mm:ss 数值时区(如：08:00:00)%Z 字母时区缩写 日期的默认填充是数字形式的0,通过在 % 后面追加字符可以更换填充方式： - 不填充_ 以空格填充0 以 0 填充^ 如果可能，使用大写填充# 如果可能，使用相反的大小写填充。 示例 一般用法 date [选项] [+格式] 1234567# 显示指定日期[root@study ~]# date -d &quot;20200102&quot;2020年 01月 02日 星期四 00:00:00 CST# 显示指定日期时间[root@study ~]# date -d &quot;20200102 15:30&quot;2020年 01月 02日 星期四 15:30:00 CST 显示指定文件日期 1234567[root@study ~]# cat datefile202012301999-8-1 13:30:30[root@JD ~]# date -f datefile2020年 12月 30日 星期三 00:00:00 CST1999年 08月 01日 星期日 13:30:30 CST 格式化日期 12[root@study ~]# date +&quot;%F %T&quot;2021-04-21 16:31:23 日期填充 1234567891011# 默认填充[root@JD ~]# date +%m04# 无填充[root@JD ~]# date +%-m4# 空格填充[root@JD ~]# date +%_m 4 扩展 GMT(Greenwich Mean Time) 指位于英国伦敦郊区的皇家格林威治天文台的标准时间。地球按经度分成 24 个区，每个区有自己当下时间，比如中国就在东 8 区，代号 +8。向东走一个区（日本，东九区），手表就要调快一个小时。 UTC(Coordinated Universal Time) 世界标准时间或世界协调时间。GMT 并不精准，于是以 GMT 为准加上修正而成的时间，被称作为 UT，一般对于我们来说，这两个值没有差别。早年的 PC 都是 GMT，后来换成了 UT 时间。 CST(China Standard Time) 中国标准时间。也就是北京时间，我国是属东八区，转成 UTC，加上 +8 的时区表示即可。 RFC 2822(Internet Message Format) RFC2822标准格式 day-of-week DD month-name YYYY HH:mm:ss ±hhmm，如：Wed, 21 Apr 2021 14:30:37 +0800 ISO 8601 国际标准 ISO 8601 格式 YYYY-MM-DDTHH:mm:ss[Z|±hh:mm]。日期与时间之间用 T 分割，当前如果在 UTC 标准时区时最后加字母 Z，其他时区用实际时间差表示。如北京时间 2021-04-21T14:51:56+0800 ISO周日历 请参考ISO周日历。 文件时间 关于文件时间请阅读 ls 命令扩展内容。","categories":[],"tags":[{"name":"日期","slug":"日期","permalink":"http://man.fcwalkers.com/tags/%E6%97%A5%E6%9C%9F/"},{"name":"时间","slug":"时间","permalink":"http://man.fcwalkers.com/tags/%E6%97%B6%E9%97%B4/"}]},{"title":"cal命令[45]","slug":"cal命令_45","date":"2021-04-18T16:00:00.000Z","updated":"2021-04-21T08:38:39.000Z","comments":true,"path":"cal命令_45.html","link":"","permalink":"http://man.fcwalkers.com/cal%E5%91%BD%E4%BB%A4_45.html","excerpt":"","text":"显示一个简单日历，如果没有任何参数指定，将显示当前月。 选项与参数123456-1 : 显示一个月日历的输出（默认选项）。-3 : 显示当前月、前一个月、后一个月的日历输出。-s : 使用星期日作为一周的第一天。-m : 使用星期一作为一周的第一天。-j : 显示儒略日期（即当年的中的天数，从每年的1月1日开始计算）。-y : 显示当前年份日历。 示例 一般用法 cal [选项] [[[天] 月] 年] 123456789# 显示当前月份日历[root@study ~]# cal 四月 2021日 一 二 三 四 五 六 1 2 34 5 6 7 8 9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 显示指定(年/月/日)日历 123456789[root@study ~]# cal 20 4 2021 四月 2021日 一 二 三 四 五 六 1 2 34 5 6 7 8 9 1011 12 13 14 15 16 1718 19 20 21 22 23 2425 26 27 28 29 30 显示指定月份天数 12345678[root@study ~]# cal -j 4 2021 四月 2021 日 一 二 三 四 五 六 91 92 9394 95 96 97 98 99 100101 102 103 104 105 106 107108 109 110 111 112 113 114115 116 117 118 119 120 扩展 儒略日期儒略日期，是以格林威治标准时中午12:00的儒略日加上那一天的瞬时时间的分数。儒略日期是儒略日添加小数部分所表示的儒略日数。","categories":[],"tags":[{"name":"日历","slug":"日历","permalink":"http://man.fcwalkers.com/tags/%E6%97%A5%E5%8E%86/"},{"name":"日期","slug":"日期","permalink":"http://man.fcwalkers.com/tags/%E6%97%A5%E6%9C%9F/"},{"name":"时间","slug":"时间","permalink":"http://man.fcwalkers.com/tags/%E6%97%B6%E9%97%B4/"}]},{"title":"watch命令[44]","slug":"watch命令_44","date":"2021-04-18T16:00:00.000Z","updated":"2021-04-19T11:24:38.000Z","comments":true,"path":"watch命令_44.html","link":"","permalink":"http://man.fcwalkers.com/watch%E5%91%BD%E4%BB%A4_44.html","excerpt":"","text":"周期性的执行程序，并全屏显示输出或者错误。可以动态观察程序不同时间的输出结果。默认每2秒运行一次，直到被手动中断为止。 选项与参数：123456-d : 高亮显示变化区域-n : 设置间隔时间-p : 精确模式，每次运行命令尝试使用ntptime保持时间准确性。-t : 关闭顶部标题(时间间隔、命令)的输出。-e : 命令错误时冻结更新，并在按下任意键后退出。-g : 当输出改变时自动退出。 示例 一般用法 watch [选项] 命令 12345# 每秒执行一次 date 命令[root@study ~]# watch -n1 dateEvery 1.0s: date Mon Apr 19 19:21:41 20212021年 04月 19日 星期一 19:21:41 CST","categories":[],"tags":[{"name":"时间","slug":"时间","permalink":"http://man.fcwalkers.com/tags/%E6%97%B6%E9%97%B4/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"}]},{"title":"exec 命令[43]","slug":"exec命令_43","date":"2020-06-14T16:00:00.000Z","updated":"2022-07-26T10:04:23.734Z","comments":true,"path":"exec命令_43.html","link":"","permalink":"http://man.fcwalkers.com/exec%E5%91%BD%E4%BB%A4_43.html","excerpt":"","text":"该命令是bash的内建命令，用于执行一个命令，并且在执行时不启用新进程，当命令结束后就结束该进程。 语法exec [选项] [-a 名称] [command [arguments]] 选项与参数：123-c : 在一个空环境执行命令-l : 传递一个 `-` 作为第零个参数-a [名称]: 传递一个名称作为第零个参数","categories":[],"tags":[{"name":"Bash","slug":"Bash","permalink":"http://man.fcwalkers.com/tags/Bash/"},{"name":"内建命令","slug":"内建命令","permalink":"http://man.fcwalkers.com/tags/%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4/"}]},{"title":"tee 命令[42]","slug":"tee命令_42","date":"2020-06-14T16:00:00.000Z","updated":"2022-07-15T09:02:02.950Z","comments":true,"path":"tee命令_42.html","link":"","permalink":"http://man.fcwalkers.com/tee%E5%91%BD%E4%BB%A4_42.html","excerpt":"","text":"该命令从标准输入(stdin) 读取并且写入到标准输出(stdout)，同时可以将内容输出成文件。 语法tee [OPTION]... [FILE]... 选项与参数：123456参数：FILE 输出的文件，可以是多个。如果指定 - 表示到标准输出。选项： -a, --append 将内容追加到指定的文件(不覆盖)。-i, --ignore-interrupts 忽略中断信号。 示例 输出到标准输出(stdout) 1234567[root@study /] ls | teebinbootdevetchome……省略","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"}]},{"title":"jhat 命令[39]","slug":"jhat命令_39","date":"2020-06-07T16:00:00.000Z","updated":"2020-06-08T02:34:57.000Z","comments":true,"path":"jhat命令_39.html","link":"","permalink":"http://man.fcwalkers.com/jhat%E5%91%BD%E4%BB%A4_39.html","excerpt":"","text":"JVM 命令， 配合 jmap 命令分析 Java 堆。 该命令是实验性的，在将来版本可能不受支持。 jhat内置了一个微型的HTTP/HTML服务器，生成dump的分析结果后，可以在浏览器中查看。jhat是一个耗时且耗费硬件资源的操作，建议将 dump 文件复制到本地进行分析，不要在服务器上直接进行分析。 语法jhat [ options ] heap-dump-file 选项与参数：1234567891011参数：heap-dump-file 要浏览的 Java 二进制堆转储文件。对于包含多个堆转储的转储文件，可以通过在文件名后面追加 #&lt;number&gt; 方式指定文件。如 myfile.hprof#3选项： -stack false|true 关闭跟踪对象分配调用堆栈。如果堆转储中没有可用的分配站点信息，则必须将此标志设置为false。默认值为true。-refs false|true 关闭对象引用跟踪。 默认值为 true. 默认情况下, 返回的指针是指向其他特定对象的对象,如反向链接或输入引用, 会统计/计算堆中的所有对象。-port port-number 设置 jhat HTTP server 的端口号. 默认值 7000。-exclude exclude-file 指定对象查询时需要排除的数据成员列表文件，例如, 如果文件列列出了 java.lang.String.value , 那么当从某个特定对象 Object o 计算可达的对象列表时, 引用路径涉及 java.lang.String.value 的都会被排除。-baseline exclude-file 指定一个基准堆转储。 在两个 heap dumps 中有相同 object ID 的对象会被标记为不是新的，其他对象被标记为新的。在比较两个不同的堆转储时很有用。-debug int 设置 debug 级别。0 表示不输出调试信息。 值越大则表示输出更详细的 debug 信息。-Jflag 通过 flag 传入 JVM 启动参数来启动一个 JVM。如 -J-Xmx512m 使用最大堆内存为 512MB。如果需要使用多个参数则传入多个 -Jxxxxxx 即可。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"jinfo 命令[41]","slug":"jinfo命令_41","date":"2020-06-07T16:00:00.000Z","updated":"2020-06-08T03:25:30.000Z","comments":true,"path":"jinfo命令_41.html","link":"","permalink":"http://man.fcwalkers.com/jinfo%E5%91%BD%E4%BB%A4_41.html","excerpt":"","text":"JVM 命令，打印指定 Java 进程、核心文件或远程调试服务器配置信息。该命令是实验性的，在将来版本可能不受支持。 语法 jinfo [ options ] pid jinfo [ options ] executable core jinfo [ options ] [ server-id@ ] remote-hostname-or-IP 选项与参数：1234567891011121314参数：pid 通过 jps 命令列出的 Java 进程 ID。executable 生成核心的 dump Java 可执行文件。core 需要打印的核心文件。remote-hostname-or-IP 远程调试的服务器主机名或 ip。server-id 可选的唯一 id，如果多台调试服务器上运行相同的远程主机，可用此选项参数标识服务器。选项： no-option 打印命令行标记和系统属性。-flags 打印传递给JVM的命令行标志。-sysprops 打印 Java 系统属性键值对。-flags name 打印指定的命令行标志的值。-flag [+|-]name 启用或禁用指定布尔类型的命令行标志。-flag [+|-]name 设置指定命令行标志的值。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"jstack 命令[40]","slug":"jstack命令_40","date":"2020-06-07T16:00:00.000Z","updated":"2020-06-08T03:05:30.000Z","comments":true,"path":"jstack命令_40.html","link":"","permalink":"http://man.fcwalkers.com/jstack%E5%91%BD%E4%BB%A4_40.html","excerpt":"","text":"JVM 命令， 打印Java进程、核心文件或远程调试服务器的Java线程堆栈跟踪。 该命令是实验性的，在将来版本可能不受支持。 用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待。远程调用的服务器必须开启 jstatd，即虚拟机的jstat守护进程。 语法 jstack [ options ] pid jstack [ options ] executable core jstack [ options ] [ server-id@ ] remote-hostname-or-IP 选项与参数：1234567891011参数：pid 通过 jps 命令列出的 Java 进程 ID。executable 生成核心的 dump Java 可执行文件。core 需要打印的核心文件。remote-hostname-or-IP 远程调试的服务器主机名或 ip。server-id 可选的唯一 id，如果多台调试服务器上运行相同的远程主机，可用此选项参数标识服务器。选项： -F 当正常输出请求不被响应时，强制输出线程堆栈。-l 除堆栈外，显示关于锁的附加信息。-m 打印具有java和本地C/C++框架的混合模式堆栈跟踪。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"jmap 命令[38]","slug":"jmap命令_38","date":"2020-06-04T16:00:00.000Z","updated":"2020-06-08T03:06:51.000Z","comments":true,"path":"jmap命令_38.html","link":"","permalink":"http://man.fcwalkers.com/jmap%E5%91%BD%E4%BB%A4_38.html","excerpt":"","text":"JVM 命令，打印给定进程、核心文件或远程调试服务器的共享对象内存映射或堆内存详细信息。 该命令是实验性的，在将来版本可能不受支持。目前这个命令不支持 Window 和 Linux Itanium 平台。远程调用的服务器必须开启 jstatd，即虚拟机的jstat守护进程。 语法jmap [ option ] pid jmap [ option ] executable core jmap [ option ] [ server-id@ ] remote-hostname-or-IP 选项与参数：123456789101112131415参数：option 通常为后面常用选项，各个选项是互斥的。pid 通过 jps 命令列出的 Java 进程 ID。executable 生成核心的 dump Java 可执行文件。core 需要打印的核心文件。remote-hostname-or-IP 远程调试的服务器主机名或 ip。server-id 可选的唯一 id，如果多台调试服务器上运行相同的远程主机，可用此选项参数标识服务器。选项： 无选项 没有任何选项将打印加载到目标 JVM 中的每个共享对象映射的起始地址、大小和全路径。-dump:[live,] format=b, file=filename 格式化转储堆到指定 filename 文件中。当指定可选子选项 live 时仅转储活动的对象。可以使用 jhat 命令浏览转储的文件。-finalizerinfo 打印在等待Finalizer线程执行finalizer方法的对象。-heap 打印Java堆详细信息。当指定可选子选项 live 时仅统计活动对象数量。-histo[:live] 显示堆中对象的统计信息。-F 当-dump没有响应时，强制生成dump快照。live 子选项不支持此模式。","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"jps 命令[36]","slug":"jps命令_36","date":"2020-06-03T16:00:00.000Z","updated":"2020-06-08T03:06:14.000Z","comments":true,"path":"jps命令_36.html","link":"","permalink":"http://man.fcwalkers.com/jps%E5%91%BD%E4%BB%A4_36.html","excerpt":"","text":"JVM 进程状态工具命令，该命令将展示本地虚拟机进程的标识符、进程名称和 ID。 语法jps [options] [hostid] 不指定 hostid 默认是 localhost。远程调用的服务器必须开启 jstatd，即虚拟机的jstat守护进程。 选项与参数：12345-q 只输出 LVMID(进程唯一 ID)-m 输出 JVM 启动时传递给 main 函数的参数 -l 输出主类全名或 jar 文件全路径-v 输出 JVM 启动时指定的 JVM 参数","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"jstat 命令[37]","slug":"jstat命令_37","date":"2020-06-03T16:00:00.000Z","updated":"2022-06-20T07:00:29.490Z","comments":true,"path":"jstat命令_37.html","link":"","permalink":"http://man.fcwalkers.com/jstat%E5%91%BD%E4%BB%A4_37.html","excerpt":"","text":"JVM 资源和性能进行实时监控工具，它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、jit编译等运行数据。该命令是实验性的，在将来的版本可能不受支持。这个命令目前在 Windows98 和 Windows ME 上无效。远程调用的服务器必须开启 jstatd，即虚拟机的jstat守护进程。 语法jstat [ generalOption | outputOptions vmid [ interval [ s|ms ] [ count ] ] ] 如果连接远程虚拟机 vmid 选项语法如下：[protocol:][//]lvmid[@hostname][:port][/servername]protocol：通信协议，如果protocol和hostname都没有指定，那么默认使用特定于平台优化的本地协议；如果protocol没有指定，但指定了hostname，那么默认使用rmi协议。lvmid：是一个特定于平台的值，用于唯一标示系统上的JVM。通常与操作系统的进程ID相同，可使用jps或ps命令得到该值。hostname：目标主机的主机名或IP地址。如果没有指定该值，那么默认为本地主机。port：与远程主机通讯的端口。该值只控制远程协议，本地协议将忽略。对于rmi协议，如果不指定该值，那么将使用默认值1099。servername：根据实现的不同，参数含义不用。本地协议将忽略该值，对于rmi协议，该参数表示远程主机rmi服务名。 选项与参数：123456789101112131415161718192021参数：generalOption 普通命令行选项。outputOptions 一个或多个输出选项。vmid 虚拟机标识符(本机通常是一个数字)。interval[s|ms] 指定数字间隔时间(默认毫秒)。count 指定输出统计信息的总行数，达到该行数命令自动终止(默认无穷大)。选项：-a abc-class 显示 ClassLoad 的相关信息；-compiler 显示JIT编译的相关信息；-gc 显示和gc相关的堆信息；-gccapacity 显示各个代的容量以及使用情况；-gccause 显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；-gcnew 显示新生代信息；-gcnewcapacity 显示新生代大小和使用情况；-gcold 显示老年代和永久代的信息；-gcoldcapacity 显示老年代的大小；-gcpermcapacity 显示永久代的大小;-gcutil 显示垃圾收集信息；-printcompilation 输出JIT编译的方法信息 状态说明 class 列名 描述 Loaded 加载类数量 Bytes 加载类数量大小(KB) Unloaded 卸载类数量 Bytes 卸载类数量大小(KB) Time 类加载和卸载消耗总时间(秒) compiler 列名 描述 Compiled 执行的编译任务数量 Failed 失败的编译任务数量 Invalid 失效的编译任务数量 Time 编译任务所消耗的总时间 FailedType 上次编译失败的编译类型 FailedMethod 上次编译失败的类名和方法 gcC即Capacity 总容量，U即Used 已使用的容量 列名 描述 S0C survivor0区的总容量 S1C survivor1区的总容量 S0U survivor0区已使用的容量 S1U survivor1区已使用的容量 EC Eden区的总容量 EU Eden区已使用的容量 OC Old区的总容量 OU Old区已使用的容量 PC 当前perm的容量 (KB) PU perm的已使用容量 (KB) YGC 新生代垃圾回收次数 YGCT 新生代垃圾回收时间 FGC 老年代垃圾回收次数(Full GC) FGCT 老年代垃圾回收时间(Full GC) GCT 垃圾回收总消耗时间 MC 方法区总容量 MU 方法区已使用容量 gccapacity内存池分代和空间容量 列名 描述 NGCMN 新生代占用的最小容量 NGCMX 新生代占用的最大容量 NGC 当前新生代容量 OGCMN 老年代占用的最小容量 OGCMX 老年代占用的最大容量 OGC 当前老年代容量 PGCMN 永久代(perm)占用最小容量 PGCMX 永久代(perm)占用最大容量 PGC 当前永久代(perm) 容量 VGC 年青代垃圾回收次数 gccause 列名 描述 LGCC 最近垃圾回收的原因 GCC 当前垃圾回收的原因 gcnew 列名 描述 TT 初始的对象在新生代中存活阈值 MTT 初始的对象在新生代中最大存活最大阈值(超过阈值没有被回收的，就会晋升到老年代中) DSS survivor区域大小 (KB) gcnewcapacity 列名 描述 S0CMX survivor0 最大容量 S1CMX survivor1 最大容量 ECMX eden 最大容量 printcompilation 列名 描述 Compiled 被执行的编译任务的数量 Size 方法字节码的字节数 Type 编译类型 Method 编译方法的类名和方法名。类名使用”/“ 代替 “.” 作为空间分隔符. 方法名是给出类的方法名. 格式是一致于HotSpot - XX:+PrintComplation 选项 示例123456789# 打印 JVM 进程相关信息[Windus@study ~]$ jps26546 jar1230 Jps# 每隔 5 秒打印一次 gc(垃圾回收) 相关堆信息[Windus@study ~]$ jstat -gc 26546 5000 S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT1728.0 1728.0 0.0 177.2 14336.0 324.9 35460.0 29010.8 45952.0 44928.1 5248.0 4998.3 121 0.353 4 0.272 0.625","categories":[],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://man.fcwalkers.com/tags/JVM/"},{"name":"JAVA","slug":"JAVA","permalink":"http://man.fcwalkers.com/tags/JAVA/"}]},{"title":"du命令[35]","slug":"du命令_35","date":"2019-07-23T16:00:00.000Z","updated":"2021-04-26T03:37:13.000Z","comments":true,"path":"du命令_35.html","link":"","permalink":"http://man.fcwalkers.com/du%E5%91%BD%E4%BB%A4_35.html","excerpt":"","text":"评估文件系统的磁盘使用量（常用在推估目录所占容量）,递归目录汇总每个文件的磁盘使用量。 选项与参数：123456789101112131415-0 : 不换行列出每个目录信息-a : 列出所有文件，不仅仅是目录(默认只列出目录)--apparent-size : 打印文件或目录自身实际大小，而不是磁盘占用空间大小-B, --block-size=SIZE : 打印前按照指定单位缩放大小。（如 `-BM` 就是 `MB`，即不到1M文件都显示1M）-c : 显示目录或文件占用的磁盘空间大小，同时还统计它们的总和。-D : 仅显示命令行列出的符号链接间接引用的文件大小。(如：间接引用文件是隐藏文件，则不会被计算在内)-L : 显示所有符号链接间接引用文件的大小。-d : 指定深度目录。（`－d0` 相当于 `-s`)--inodes : 列出 inode 使用量代替 block 使用量。--time[=WORD] : 显示文件和目录的 mtime，WORD 可选值有 atime, access, use, ctime, status-h : 以易读方式显示文件大小-s : 仅显示总计，即当前目录的大小-S : 仅显示不包括子目录的总计，与`-s`有区别--exclude=PATTERN : 忽略 PATTERN 指定的文件-X, --exclude-from=FILE : 忽略在文件中指定的目录 示例 一般用法 du [选项] [目录或文件名] 123# 文件从大到小排序[root@study]# du -sh * |sort -rh447M /root 扩展 文件(或目录)自身实际大小和占用磁盘空间大小的区别 (–apparent-size) 文件大小是文件的实际大小，而占用空间是占硬盘的实际空间。以EXT2文件系统为例，一个data block为4K，如果一个文件只实际大小即使不到4K，也要占用4K磁盘空间; 如果一个文件实际大小为4K零1个节，也要占用8K的磁盘空间。此时就产生了文件的实际大小和占用磁盘空间大小的区别。 更多资料参考《磁盘与文件管理》","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"磁盘","slug":"磁盘","permalink":"http://man.fcwalkers.com/tags/%E7%A3%81%E7%9B%98/"}]},{"title":"curl命令[34]","slug":"curl命令_34","date":"2019-07-04T16:00:00.000Z","updated":"2023-02-23T08:30:57.139Z","comments":true,"path":"curl命令_34.html","link":"","permalink":"http://man.fcwalkers.com/curl%E5%91%BD%E4%BB%A4_34.html","excerpt":"","text":"curl是一个可以使用多种协议(DICT、 FILE、 FTP、 FTPS、 GOPHER、 HTTP、 HTTPS、 IMAP、 IMAPS、 LDAP、 LDAPS、 POP3、 POP3S、 RTMP、 RTSP、 SCP、SFTP、 SMTP、 SMTPS、 TELNET、 TFTP)，通过服务器上传或下载的无用户交互工具。它提供了代理、用户认证、HTTP POST、SSL连接、cookie、断点续传等有用的功能。 URL语法URL语法依赖于协议的。支持设置多个URL，并且会依次去请求。 使用花括号指定多个URLhttp://site.&#123;one,two,three&#125;.com 使用中括号获取字线或数字序列ftp://ftp.numericals.com/file[1-100].txtftp://ftp.numericals.com/file[001-100].txtftp://ftp.letters.com/file[a-z].txt URL语法不支持嵌套序列，但可以相邻使用序列：http://any.org/archive[1996-1999]/vol[1-4]/part&#123;a,b,c&#125;.html 使用步计数器获取每N个数字或字母 http://www.numericals.com/file[1-100:10].txt http://www.letters.com/file[a-z:2].txt 选项与参数：12345678910111213141516171819202122232425262728-# : 显示当前状态的进度条-(0-6) : 强制curl使用某种形式访问URL，如-0表示http1.0，-4表示ipv4-A : 指定http请求的User-Agent-b : 发送cookie数据到服务器，数据格式为：&quot;NAME1=VALUE1; NAME2=VALUE2&quot;；-c &lt;file&gt; : 存储服务器返回的cookie到指定文件，&quot;-&quot;表示输出到标准输出-C &lt;offset&gt; : 断点续转，从文件头的指定位置开始继续下载/上传；offset续传开始的位置，如果offset值为“-”，curl会自动从文件中识别起始位置开始传输-d &lt;data&gt; : 使用 POST 请求方式发送数据到 HTTP 服务器，默认相当于浏览器表单属性（method=&quot;POST&quot;，enctype=&quot;application/x-www-form-urlencoded&quot;）， 可以通过 -H 选项改变数据类型。 数据格式：&quot;NAME1=VALUE1&amp;NAME2=VALUE2&quot; 如果 data 以 @ 开头，则后面应该是读取数据的文件名或者 - ，表示从文件或者 stdin 中读取数据。 文件中的数据必须是被 URL 编码的，且允许指定多个文件。如读取 test.txt 文件可写成` -d @test.txt`。-D &lt;file&gt; : 存储http头到指定文件-X &lt;command&gt; : 指定请求方式（默认是GET）-e &lt;URL&gt; : 指定访问页面的来源页面，告诉http服务从哪个页面进入到此页面-f : 静默处理服务器错误(连接出错时不回显错误信息)，大多在脚本中使用为了更好的处理处理失败的情况。-F, --form &lt;name=content&gt; : 指定 HTTP multipart/form-data POST 参数（文件上传）-H : 指定http请求头header-i : 只输出HTTP-header，不获取内容-j : 告诉curl放弃所有的session，相当于重启浏览器-L : 当服务器地址是(自动)跳转到其他地址时，使用此选项curl就会跳转到新的网址。-o &lt;file&gt; : 将返回内容输出到指定文件（不加此选项默认返回到 stdout )-u &lt;user:password&gt; : 此参数相当于设置http头“Authorization：”-m &lt;seconds&gt; : 允许整个操作花费的最大时间。可以防止批量任务占用过长时间，导致网络变慢。--retry &lt;num&gt; : 如果遇到一个错误（超时、FTP响应码4xx、HTTP状态码5xx等）重试次数，默认是 0，表示不重试。每次重试时间间隔加倍（依次是1s，2s，4s...直到10分钟）。--retry-delay &lt;seconds&gt; : 设置重试时间间隔（默认加倍递增），如果设置为 0，也使用默认时间。--retry-max-time &lt;seconds&gt; : 重试超时时间设置，如果设置为 0 则不超时重试。 示例 一般用法 curl [options] [URL...] 下载页面 curl -o index.html http://baidu.com 伪造来源页面 curl -e http://man.fcwalkers.com http://baidu.com 发送 Json 数据到服务器 curl http://域名/graph/updateGraph -d &#39;&#123;&quot;graphId&quot;:&quot;0e7c9a918c114394bfa85d17b82e4afa&quot;,&quot;nebulaGraph&quot;:&quot;abc&quot;&#125;&#39; -H &quot;Content-type: application/json&quot; 文件上传 1234567891011# @ 指定上传文件（ uploadFile 为表单 name）curl -F &quot;uploadFile=@./test.xlsx&quot; htpp://xxx.../# 上传文件，并通过 filename 对文件重命名curl -F &quot;uploadFile=@./test.xlsx;filename=test-copy.xlsx&quot; htpp://xxx.../# 上传文件，并通过 type 指定 Content-Typecurl -F &quot;uploadFile=@./test.html;type=text/html&quot; htpp://xxx.../# &lt; 只获取文件内容curl -F &quot;uploadFile=&lt;./test.xlsx&quot; http://xxx.../","categories":[],"tags":[{"name":"上传","slug":"上传","permalink":"http://man.fcwalkers.com/tags/%E4%B8%8A%E4%BC%A0/"},{"name":"下载","slug":"下载","permalink":"http://man.fcwalkers.com/tags/%E4%B8%8B%E8%BD%BD/"}]},{"title":"git命令[33]","slug":"git命令_33","date":"2019-04-11T16:00:00.000Z","updated":"2019-04-12T07:26:25.000Z","comments":true,"path":"git命令_33.html","link":"","permalink":"http://man.fcwalkers.com/git%E5%91%BD%E4%BB%A4_33.html","excerpt":"","text":"git是一个免费开源的分布式的版本控制系统。它是一个快速高性能的的，并且远胜于如svn、cvs等。通过它可以轻松管理文件的各种版本，包括提交、合并、回退等。 示例 一般用法 git [选项] 扩展更多用法参考 ：GIT学习笔记","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"版本控制","slug":"版本控制","permalink":"http://man.fcwalkers.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"}]},{"title":"vim命令[32]","slug":"vim命令_32","date":"2019-04-11T16:00:00.000Z","updated":"2019-04-12T07:12:50.000Z","comments":true,"path":"vim命令_32.html","link":"","permalink":"http://man.fcwalkers.com/vim%E5%91%BD%E4%BB%A4_32.html","excerpt":"","text":"vim是一个程序编辑器，是vi的进阶版本。用来处理文本文件，具有程序编辑能力，包括语法检测，关键字改变颜色，同时支持安装相关插件协同使用。 示例 一般用法 vim [选项] [文件列表] 扩展更多用法参考 ：vim编辑器","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"程序","slug":"程序","permalink":"http://man.fcwalkers.com/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"编辑器","slug":"编辑器","permalink":"http://man.fcwalkers.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"}]},{"title":"sort命令[31]","slug":"sort命令_31","date":"2019-04-03T16:00:00.000Z","updated":"2022-06-16T06:59:10.913Z","comments":true,"path":"sort命令_31.html","link":"","permalink":"http://man.fcwalkers.com/sort%E5%91%BD%E4%BB%A4_31.html","excerpt":"","text":"对标准输入或文本文件的行时行排序，将排序好的内容写到标准输出中。 选项与参数：12345678910111213-b : 忽略每行开始的空格字符。-c : 检查文件是否已经按照顺序排序。-d : 排序时，忽略除英文字母、数字及空格字符外的其他的字符。-f : 将小写字母转换成大写字母进行排序。-i : 排序时，忽略除了040至176之间的ASCII字符外的其他的字符。-m : 合并已排序的文件。-n : 按照数字顺序进行排序。-o : 将结果定入文件，而不是标准输出。-r : 以相反顺序行排序。-u : 相同数据中只出现一行，即uniq-t : 设置分割符，默认&quot;tab&quot;-k : 设置分割后的排序字段-z : 以0字节结束行，而不是使用换行符。 示例 分割排序 12# 以&quot;:&quot;分割后第3个字段排序[Windus@study ~]$ cat /etc/passwd | sort -t &quot;:&quot; -k 3","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"排序","slug":"排序","permalink":"http://man.fcwalkers.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"uniq命令[30]","slug":"uniq命令_30","date":"2019-04-03T16:00:00.000Z","updated":"2019-04-04T07:36:51.000Z","comments":true,"path":"uniq命令_30.html","link":"","permalink":"http://man.fcwalkers.com/uniq%E5%91%BD%E4%BB%A4_30.html","excerpt":"","text":"报告或忽略标准输入或文件的重复行，一般与sort命令结合使用。 选项与参数：12345678910-c : 在每列前统计出重复行数。-d : 仅显示重复的行。-D : 显示全部重复行。-i : 忽略大小写。-u : 仅显示无重复的行。-f&lt;N&gt; : 不比较前N字段。-s&lt;N&gt; : 不比较前N个字符。-w&lt;N&gt; : 每行中比较不超过N个字符。--help : 帮助--version : 版本 示例 一般用法 12345678# 切割登陆信息排序并统计重复行数[Windus@study ~]$ last | cut -d &quot; &quot; -f1 | sort | uniq -c 1 7 reboot 37 root 10 (unknown 15 windus 1 wtmp","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"排序","slug":"排序","permalink":"http://man.fcwalkers.com/tags/%E6%8E%92%E5%BA%8F/"},{"name":"重复","slug":"重复","permalink":"http://man.fcwalkers.com/tags/%E9%87%8D%E5%A4%8D/"}]},{"title":"wc命令[29]","slug":"wc命令_29","date":"2019-04-03T16:00:00.000Z","updated":"2019-04-04T08:22:45.000Z","comments":true,"path":"wc命令_29.html","link":"","permalink":"http://man.fcwalkers.com/wc%E5%91%BD%E4%BB%A4_29.html","excerpt":"","text":"输出文件中的行数、单词数、字节数，如果指定多个文件，则还有一个行数的总计。没有指定文件或指定文件是-，则读取标准输入。 选项与参数：123456-c/m : 输出字节统计数。-l : 输出行数。-L : 输出最长的行的长度。-w : 输出字(单词)数。--help : 帮助--version : 版本 示例 一般用法wc [选项] [文件列表] 123456# 输出文件行数[Windus@study ~]$ wc -l /etc/passwd44 /etc/passwd[Windus@study ~]$ cat /etc/passwd | wc -l44","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"排序","slug":"排序","permalink":"http://man.fcwalkers.com/tags/%E6%8E%92%E5%BA%8F/"}]},{"title":"free命令[26]","slug":"free命令_26","date":"2019-04-02T16:00:00.000Z","updated":"2019-04-03T07:13:13.000Z","comments":true,"path":"free命令_26.html","link":"","permalink":"http://man.fcwalkers.com/free%E5%91%BD%E4%BB%A4_26.html","excerpt":"","text":"该命令用于观察内存使用情况。 选项与参数：12345678-b : 以Bytes为单位显示。-k : 以KB为单位显示。-m : 以MB为单位显示。-g : 以GB为单位显示。-h : 自动根据内容显示适合人类观察的单位。-t : 输出最终结果显示内存与swap的总量。-s&lt;秒数&gt; : 设置几秒输出一次，不间断一直输出。-c&lt;次数&gt; : 与&quot;-s&quot;同时使用，设置输出几次后退出。 示例 -s与-c的使用 123456789# 设置5秒中内显示两次后退出显示[Windus@study ~]free -s5 -c2 total used free shared buff/cache availableMem: 1016244 349864 226696 81800 439684 346028Swap: 6291452 289596 6001856 total used free shared buff/cache availableMem: 1016244 350128 226396 81800 439720 345728Swap: 6291452 289596 6001856 扩展Linux系统通常会将内存用于高速缓存读写文件，以加快系统运行效率，所以通常会看到内存被用光，shared与buff/cache就是被使用的量当中高速作缓存的量，这些用量在系统比较繁忙的时候，将会被释放出而断续利用，因此available显示的就是可用值。需要注意的是swap的使用量，当swap被使用或使用量超过20%时，说明实体内存不足。","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"http://man.fcwalkers.com/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"内存","slug":"内存","permalink":"http://man.fcwalkers.com/tags/%E5%86%85%E5%AD%98/"}]},{"title":"netstat命令[26]","slug":"netstat命令_26","date":"2019-04-02T16:00:00.000Z","updated":"2021-10-20T02:14:04.000Z","comments":true,"path":"netstat命令_26.html","link":"","permalink":"http://man.fcwalkers.com/netstat%E5%91%BD%E4%BB%A4_26.html","excerpt":"","text":"netstat命令是一个监控TCP/IP网络的非常有用的工具，用于显示网络连接、路由表、接口状态、伪装连接和组播成员组等信息。 选项与参数：123456789-a : 列出系统上所有的连线、监听和Socket数据。-t : 列出tcp网络封包数据。-u : 列出udp网络封包数据。-n : 以数字形式显示地址，而不是去解析主机、端口或用户名。-l : 列出目前正在网络监听的服务。-p : 列出该网络服务程序的PID。-c : 使netstat每秒输出一次。-e : 列出附加信息。-r : 显示路由表 状态说明 活动的Internet网络连接 (TCP, UDP, raw) Proto网络封包协议。 Recv-Q连接此Socket的用户程序未拷贝的字节数。 Send-Q远程主机未确认的字节数。 Local AddressSocket的本地地址(本地主机名)和端口号。除非给定-n选项，否则Socket地址按标准主机名(FQDN)进行解析，而端口号则转换到相应的服务名。 Foreign AddressSocket的远程地址(远程主机名)和端口号。 StateSocket的状态。因为在RAW协议中没有状态，而且UDP也不用状态信息，所以此行留空。通常它为以下几个值之一： LISTENSocket监听进来的连接。如果不设置-l或者-a选项，将不显示出来这些连接。 ESTABLISHEDSocket有一个有效连接。 SYN_SENTSocket尝试建立一个连接。 SYN_RECV从网络上收到一个连接请求。 FIN_WAIT1Socket已关闭，连接正在断开。 FIN_WAIT2连接已关闭，Socket等待远程方中止。 TIME_WAIT在关闭之后，Socket等待处理仍然在网络中的分组 CLOSEDSocket未用。 CLOSE_WAIT远程方已关闭，等待Socket关闭。 LAST_ACK远程方中止，Socket已关闭。等待确认。 CLOSINGSocket都已关闭，而还未把所有数据发出。 UNKNOWNSocket状态未知。 UserSocket所属的用户名或UID。 PID/Program name以斜线分隔的处理Socket程序的PID及进程名。-p选项可以使此栏目被显示。你需要超级管理员权限来查看不是你拥有的Socket的信息。对IPX Socket还无法获得此信息。 活动的UNIX Socket ProtoSocket所用的协议(通常是unix)。 RefCnt通过此Socket连接的进程数 Flags显示的标志为SO_ACCEPTON(显示为ACC),SO_WAITDATA(W)或SO_NOSPACE(N)。如果相应的进程等待一个连接请求，那么SO_ACCECPTON用于未连接的Socket。其它标志通常并不重要。 TypeSocket使用的一些类型： SOCK_DGRAM此Socket用于数据报(无连接)模式。 SOCK_STREAM流模式(连接)Socket SOCK_RAW此Socket用于RAW模式。 SOCK_RDM一种服务可靠性传递信息。 SOCK_SEQPACKET连续分组Socket。 SOCK_PACKETRAW接口使用Socket。 UNKNOWN State此字段包含以下关键字之一： FREESocket未分配。 LISTENINGSocket正在监听一个连接请求。除非设置-l或者-a选项，否则不显示。 CONNECTINGSocket正要建立连接。 CONNECTEDSocket已连接。 DISCONNECTINGSocket已断开。 (empty)Socket未连。 UNKNOWN这个状态不应该出现。 PID/Program name处理此Socket的程序进程名和PID。上面关于活动的Internet网络连接的部分有更详细的信息。 Path连接到此Socket的相关程序路径。 示例 一般用法 123456# 显示所有tcp封包数据监听中的网络连接[Windus@study ~]netstat -atnlProto Recv-Q Send-Q Local Address Foreign Address Statetcp 0 0 0.0.0.0:111 0.0.0.0:* LISTENtcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN……省略","categories":[],"tags":[{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"网络","slug":"网络","permalink":"http://man.fcwalkers.com/tags/%E7%BD%91%E7%BB%9C/"}]},{"title":"uname命令[27]","slug":"uname命令_27","date":"2019-04-02T16:00:00.000Z","updated":"2019-04-03T07:18:00.000Z","comments":true,"path":"uname命令_27.html","link":"","permalink":"http://man.fcwalkers.com/uname%E5%91%BD%E4%BB%A4_27.html","excerpt":"","text":"该命令用于查看系统与核心相关信息。 选项与参数：123456-a : 显示系统所有信息，包括下面选项数据。-s : 显示系统核心名称。-r : 显示系统核心版本。-m : 显示本系统的硬件名称，如：i686、x86_64等。-p : 显示CPU类型。-i : 显示硬件平台。","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"http://man.fcwalkers.com/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"}]},{"title":"uptime命令[28]","slug":"uptime命令_28","date":"2019-04-02T16:00:00.000Z","updated":"2019-04-03T07:28:02.000Z","comments":true,"path":"uptime命令_28.html","link":"","permalink":"http://man.fcwalkers.com/uptime%E5%91%BD%E4%BB%A4_28.html","excerpt":"","text":"该命令用于查看系统启动时间与工作负载。返回信息包括现在时间、系统已经运行时间、目前登陆用户数量、系统在过去的1分钟|5分钟|15分钟内的平均负载。 选项与参数：12-p : 使用比较好看的形式显示系统启动时间-s : 显示系统启动日期，格式为yyyy-mm-dd HH:MM:SS。","categories":[],"tags":[{"name":"时间","slug":"时间","permalink":"http://man.fcwalkers.com/tags/%E6%97%B6%E9%97%B4/"},{"name":"系统","slug":"系统","permalink":"http://man.fcwalkers.com/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"}]},{"title":"top命令[25]","slug":"top命令_25","date":"2019-04-01T16:00:00.000Z","updated":"2022-07-21T02:10:02.392Z","comments":true,"path":"top命令_25.html","link":"","permalink":"http://man.fcwalkers.com/top%E5%91%BD%E4%BB%A4_25.html","excerpt":"","text":"top命令用查看系统进程，与ps命令不同之处在于，top命令可以持续监测程序的运行状态，是动态实时的交互式的显示方式，通过快捷键进行管理。 选项与参数：12345678-h : 显示帮助-v : 显示版本-b : 进入批处理模式，此时不接受任何输入，并且一直迭代运行到 &quot;-n&quot; 选项设置的限制次数或者杀掉进程时自动退出，当需要往其它程序和文件输出时很有用，如搭配数据流重定向到文件-s : 强制进入安全模式，即使是root用户也无法操作，如kill掉进程-p&lt;pid&gt; : 显示指定pid的信息-u&lt;uid&gt; : 显示指定用户进程-d&lt;数字&gt; : 设置top更新的秒数，默认为5秒-n&lt;迭代次数&gt; : 设定top输入迭代的最大次数 交互命令 ?/h显示帮助命令，该命令有两个级别第一次键入显示基本交互命令的简短形式(在安全模式下的交互命令会变少)，再次键入后显示详细信息 q退出top程序 &lt;Enter&gt;/&lt;Space&gt;刷新显示 i切换显示空闲任务 k指定一个pid(默认为1)，杀掉该进程 B加粗显示切换 A切换交替显示模式该交替模式下显示4个窗口 1.Def(默认字段组)、2.Job(任务字段组)、3. Mem(内存字段组)、4.Usr(用户字段组)这4个窗口都是一个独立的可配置的区域，并且只有一个窗口是当前窗口，当前窗口的名称显示在左上方，只有当前窗口才会接受你键盘交互命令。各个窗口之间可以通过a、w来切换上一个窗口和下一个窗口，或者直接使用g输入选择当前窗口。 d/s设置更新秒数，同命令行-d选项 l、t、m切换顶部相应的平均负载、任务/CPU状态和内存信息的概况显示 f字段显示/隐藏、排序管理，进入交互界面通过，通过说明按键进行操作top也支持一些排序列快捷键，包括M%MEM字段、NPID字段、P%CPU字段、TTIME+字段排序 R切换反向/常规排序 c切换是否显示进程启动时的完整路径和程序名 V切换树视图 Z改变配色 z根据Z的本色切换彩色显示 x、y切换高亮信息：’x’将排序字段高亮显示（纵列）；’y’将运行进程高亮显示（横行） u显示指定用户进程 n/#设置最大显示的任务数量 r重新设置优先级 J对齐数字列 j对齐字符列 L查找字符串，通过&amp;键查找下一个 o/O过滤搜索进程(O表示不忽略值的大小写)语法列名=值，通过=键退出过滤 =退出任务限制，包括但不限于i、o、u、n等键功能 状态说明 首行字段(与uptime命令输出相似)通过l键切换显示 当前时间 系统已运行的时间 当前登录用户的数量 相应最近5、10和15分钟内的平均负载。 第二行字段显示任务或者进程的总结 第三行显示CPU状态，通过t键切换显示 us, user : 运行(未调整优先级的) 用户进程的CPU时间 sy，system : 运行内核进程的CPU时间 ni，niced : 运行已调整优先级的用户进程的CPU时间 wa，IO wait : 用于等待IO完成的CPU时间 hi : 处理硬件中断的CPU时间 si : 处理软件中断的CPU时间 st : 这个虚拟机被hypervisor偷去的CPU时间（如果当前处于一个hypervisor下的vm，实际上hypervisor也是要消耗一部分CPU处理时间的）。 最后两行显示内存信息(与free命令输出相似)，通过m键切换显示 表头列名 PID进程ID，进程的唯一标识符 USER进程所有者的实际用户名 PR进程的调度优先级，一些值是’rt’表示进程运行在实时态。 NI进程的nice值（优先级）。越小的值意味着越高的优先级 VIRT进程使用的虚拟内存 RES驻留内存大小。驻留内存是任务使用的非交换物理内存大小 SHR进程使用的共享内存 S进程的状态(详见ps命令) %CPU自从上一次更新时到现在任务所使用的CPU时间百分比 %MEM进程使用的可用物理内存百分比 TIME+任务启动后到现在所使用的全部CPU时间，精确到百分之一秒 COMMAND运行进程所使用的命令 示例 top数据流重定向到文件 12# top迭代两次写入top_file文件[Windus@study ~]top -bn2 &gt; top_file","categories":[],"tags":[{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"程序","slug":"程序","permalink":"http://man.fcwalkers.com/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"进程","slug":"进程","permalink":"http://man.fcwalkers.com/tags/%E8%BF%9B%E7%A8%8B/"}]},{"title":"cut命令[22]","slug":"cut命令_22","date":"2019-03-26T16:00:00.000Z","updated":"2019-04-04T07:37:36.000Z","comments":true,"path":"cut命令_22.html","link":"","permalink":"http://man.fcwalkers.com/cut%E5%91%BD%E4%BB%A4_22.html","excerpt":"","text":"cut命令功能是将一段内容的某一段给他“切”出来，处理的内容是以“行”为单位。 选项与参数：123-d : 后面接分隔字符(默认&quot;tab&quot;)。与 -f 一起使用-f : 依据 -d 的分隔字符将一段讯息分区成为数段，用 -f 取出第几段的意思-c : 以字符 （characters） 的单位取出固定字符区间 示例 -d用法 123456789101112#显示切割后的前5个[Windus@study ~]$ echo $&#123;PATH&#125; | cut -d &#x27;:&#x27; -f -5……省略#显示切割后的第5个[Windus@study ~]$ echo $&#123;PATH&#125; | cut -d &#x27;:&#x27; -f 5/usr/bin #显示切割后的3-5个[Windus@study ~]$ echo $&#123;PATH&#125; | cut -d &#x27;:&#x27; -f 3,5/usr/local/bin:/usr/bin#显示切割后的3到最后一个 [Windus@study ~]$ echo $&#123;PATH&#125; | cut -d &#x27;:&#x27; -f 3- /usr/local/bin:/usr/sbin:/usr/bin:/root/bin -c用法 12345678910111213#将 export 输出的讯息，取得第 12 字符以后的所有字串[Windus@study ~]$ exportdeclare -x HISTCONTROL=&quot;ignoredups&quot;declare -x HISTSIZE=&quot;1000&quot;declare -x HOME=&quot;/root&quot;……省略#注意，每个数据都是排列整齐的输出！如果不想要`declare -x`时，就得这么做：[Windus@study ~]$ export | cut -c 12-HISTCONTROL=&quot;ignoredups&quot;HISTSIZE=&quot;1000&quot;HOME=&quot;/root&quot;……省略","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"分割","slug":"分割","permalink":"http://man.fcwalkers.com/tags/%E5%88%86%E5%89%B2/"},{"name":"撷取","slug":"撷取","permalink":"http://man.fcwalkers.com/tags/%E6%92%B7%E5%8F%96/"}]},{"title":"grep命令[23]","slug":"grep命令_23","date":"2019-03-26T16:00:00.000Z","updated":"2023-07-11T06:23:08.618Z","comments":true,"path":"grep命令_23.html","link":"","permalink":"http://man.fcwalkers.com/grep%E5%91%BD%E4%BB%A4_23.html","excerpt":"","text":"grep命令是将输入内容通过指定的表达式把相匹配的内容打印出来，默认以行的形式匹配打印。另外grep有两个变形体egrep和fgrep，分别对应grep -E和grep -F。由于fgrep命令是固化字符串搜索，所以速度较快。 选项与参数：1234567891011-a : 将 binary 文件以 text 文件的方式搜寻数据-c : 计算找到 &#x27;搜寻字串&#x27; 的次数-i : 忽略大小写的不同，所以大小写视为相同-n : 顺便输出行号-v : 反向选择，亦即显示出没有 &#x27;搜寻字串&#x27; 内容的那一行-r : 递归读取目录下的所有文件-E : 将输入内容使用延伸表达式匹配打印出来，可直接使用egrep命令-F : 将表达式视为固定字符串(不能进行转义)进行匹配，可直接使用fgrep命令--color=auto : 可以将找到的关键字部分加上颜色的显示喔-A : 后面可加数字，为 after 的意思，除了列出该行外，后续的 n 行也列出来-B : 后面可加数字，为 before 的意思，除了列出该行外，前面的 n 行也列出来 示例 一般用法 grep [-acinv] [--color=auto] &#39;搜寻字串&#39; filename 1234567# 将 /etc/passwd 文件中包含 root 的行打印出来，同时打印行号[root@study ~]$ grep -n &#x27;root&#x27; /etc/passwd1:root:x:0:0:root:/root:/bin/bash10:operator:x:11:0:operator:/root:/sbin/nologin# 将 nginx 下端口为 13192 的文件的打印出来[root@study ~] grep -r &#x27;13192&#x27; conf.d/* 管线用法 12345#撷取出进程中包含nginx的行[root@study ~]$ ps -ef|grep &#x27;nginx&#x27;root 2614 1108 0 15:00 pts/0 00:00:00 grep --color=auto nginxroot 10535 1 0 Mar23 ? 00:00:00 nginx: master process nginxroot 10536 10535 0 Mar23 ? 00:00:10 nginx: worker process","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"撷取","slug":"撷取","permalink":"http://man.fcwalkers.com/tags/%E6%92%B7%E5%8F%96/"},{"name":"行号","slug":"行号","permalink":"http://man.fcwalkers.com/tags/%E8%A1%8C%E5%8F%B7/"}]},{"title":"ps命令[24]","slug":"ps命令_24","date":"2019-03-26T16:00:00.000Z","updated":"2019-04-10T03:36:43.000Z","comments":true,"path":"ps命令_24.html","link":"","permalink":"http://man.fcwalkers.com/ps%E5%91%BD%E4%BB%A4_24.html","excerpt":"","text":"ps命令就是最基本同时也是非常强大的进程查看命令.使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵尸、哪些进程占用了过多的资源等等。ps是显示的是瞬间进程的状态，并不是动态连续，如果想对进程进行实时监控应该使用top命令。 ps命令可以接收UNIX、BSD、GNU三种风格的参数，不同风格的参数可以混合使用，但可能会出现冲突。出于对不同风格的兼容的目的因此有许多选项，意义是相同的。 默认情况下，ps命令默认展示当前用户同一终端下的所以调用程序。 选项与参数：12345678910111213141516171819202122232425262728293031UNIX风格 : -A : 所有的进程均显示出来，与 -e 具有同样的效用-a : 显示所有终端机下的所有进程，包括其他用户的进程-u&lt;用户识别码&gt; : 列出属于该用户的程序的状况，也可使用用户名称来指定，与-U具有同样的效果。-f : 显示更为完整的输出-p : 通过空白符或逗号分割pid显示指定程序(ps -p &quot;1 2&quot;或ps -p 1,2)-u : 显示指定用户的程序-l : 显示长格式(经常与-y一起使用)-y : 不显示标志&quot;F&quot;列，显示&quot;RSS&quot;代替&quot;ADDR&quot;列(该命令只能与-l命令一起使用)-o : 指定用户定义的格式显示(ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm)-H : 显示进程层级关系-C&lt;命令&gt; : 显示出指定命令的程序BSD风格 :a : 显示现行终端机下的所有程序，包括其他用户的程序(通常与x选项搭配显示所有终端机所有用户的所有进程)x : 显示当前用户下所有程序，不以终端机区分T : 显示当前终端下所有相关程序r : 显示当前终端下运行的程序p : 通过空白符或逗号分割pid显示指定程序u : 以用户的形式展示v : 以虚拟内存的形式展示c : 展示真实的命令名称，这是从可执行文件中推导出来的，而不是从argv值中而来。e : 在command后面显示环境变量h : 不显示表头行f : 显示层次结构j : 显示作业控制格式化l : 显示长格式(与-l选项类似)GNU风格 :--no-headers : 不显示表头行--sort : 排序显示结果，通过+,-符号表示正序和倒序(ps --sort=uid,-ppid,+pid) 状态说明 表头列名 F 代表程序的标志 S/STAT 程序的状态 UID/USER 代表程序的拥有者 PID 代表程序的PID PPID 代表程序的父程序的PID C/%CPU 代表CPU的使用率(单位：百分比) PRI/NI 代表程序的执行优先级，数值越小表示越快被CPU执行 ADDR 代表程序在内存的哪个部分(“-“表示当前程序正在running) SZ 代表程序用掉的内存 WCHAN 代表程序是否运行(“-“表示当前程序正在running) TTY 代表登陆终端的位置 TIME 代表使用掉CPU的时间 CMD/COMMAND 代表程序触发的指令 %MEM 代表程序战胜的实体内存百分比 VSZ 代表程序使用掉的虚拟内存量(KBytes) RSS 代表程序占用的固定内存量(KBytes) START 代表程序触发启动的时间 TIME 代表程序实际使用CPU运行的时间 进程标志(F列) 1 分叉但不执行的的进程，表示此子程序仅进行复制(fork)，而没有实际执行(exec) 4 使用超级用户(root)权限的进程 进程状态码(STAT或S列) D 不可被唤醒的睡眠状态(通常为等待IO) R 正在运行或可运行(在运行队列上) S 正在睡眠状态的，但可以被唤醒(等待事件完成) T 作业信号停止(可能在工作控制背景暂停或除错状态) t 在跟踪期间被调试器停止 X 死亡程序(不应该被看见) Z 已终止的僵尸进程，但是其父程序却无法正常的终止它，造成 zombie (疆尸) 程序的状态 对于BSD格式时STAT或S列可能还会有如下额外的字符显示： &lt; 高优先级 N 低优先级 L 已将pages锁定在内存中 s 会话的领导进程(会话是由其中的进程建立的) l 多线程的 + 在前台进程中 示例 常用组合命令 1234567891011# 使用UNIX风格参数查看所有进程ps -eps -ef (常用)ps -eFps -ely# 使用BSD风格参数查看所有进程ps axps aux (常用)# 查看进程树结构ps -ejHps axjf (常用) ps -aux、ps aux和ps -ef的区别POSIX和UNIX的标准要求”ps -aux”打印用户名为”x”的用户的所有进程，以及打印所有将由-a选项选择的过程。如果用户名为”x”不存在，ps的将会解释为”ps aux”，而且会打印一个警告。这种行为是为了帮助转换旧脚本和习惯。它是脆弱的，将来可能会改变，因此不应依赖。 1234567891011121314151617# 显示用户名为windus的进程[Windus@study ~]$ ps -auwindus PID TTY TIME CMD22052 ? 00:00:00 sshd22053 pts/1 00:00:00 bash22431 pts/1 00:00:00 ps# 用户abc不存在，所以抛出异常[Windus@study ~]$ ps -auabcerror: user name does not exist# 显示所有进程[windus@fcwalkers ~]$ ps auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.0 0.4 128092 4608 ? Ss 16:06 0:03 /usr/lib/systemd/systemd --switched-root 2 0.0 0.0 0 0 ? S 16:06 0:00 [kthreadd]……省略 -ef和aux区别是一个是UNIX风格参数，一个是BSD风格参数。展示结果差异不大，主要区别是前者不会截断COMMAND列，后者会截断。 扩展 Linux的三种参数风格 UNIX风格的参数,前面加单破折线 BSD风格的参数,前面不加破折线 GNU风格的长参数,前面加双破折线 Priority与Nice Priority(PRI)，是Linux系统程序优先执行顺序的值。这个值越低代表越优先，但要注意的是这个值是由系统核心动态调整的，使用者无法直接调整。Nice(NI)，由于使用者无限干涉PRI的大小，所以当需要调整程序优先级时就需要通过设置Nice值来调整，PRI与NI的关系如下：$$PRI_新 = PRI_旧 + NI $$ NI值特点： root用户可以随意调整自己或他人用户程序的Nice值，且调整范围为-20~19 一般用户仅可调整自己的程序Nice值，且调整范围为0~19(避免一般用户抢占系统资源) 一般用户仅可将Nice值越调越高，如原本为5调整为10 调整Nice值的方法： 一开始执行程序立即调整程序的Nice值，使用nice命令。 调整某个存在的pid的Nice值，使用renice命令。","categories":[],"tags":[{"name":"观察","slug":"观察","permalink":"http://man.fcwalkers.com/tags/%E8%A7%82%E5%AF%9F/"},{"name":"程序","slug":"程序","permalink":"http://man.fcwalkers.com/tags/%E7%A8%8B%E5%BA%8F/"},{"name":"进程","slug":"进程","permalink":"http://man.fcwalkers.com/tags/%E8%BF%9B%E7%A8%8B/"}]},{"title":"cat命令[16]","slug":"cat命令_16","date":"2019-03-25T16:00:00.000Z","updated":"2019-04-04T08:40:43.000Z","comments":true,"path":"cat命令_16.html","link":"","permalink":"http://man.fcwalkers.com/cat%E5%91%BD%E4%BB%A4_16.html","excerpt":"","text":"cat命令用于将文件内容从第一行开始打印到标准输出中，与之相反的tac命令是将文件内容从最后一行开始打印到标准输出中。 选项与参数：123456-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号-E ：将结尾的断行字符 $ 显示出来-n ：打印出行号，连同空白行也会有行号，与 -b 的选项不同-T ：将 [tab] 按键以 ^I 显示出来-v ：列出一些看不出来的特殊字符-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已 示例 一般用法 cat [选项] [目标文件]","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"审阅","slug":"审阅","permalink":"http://man.fcwalkers.com/tags/%E5%AE%A1%E9%98%85/"},{"name":"行号","slug":"行号","permalink":"http://man.fcwalkers.com/tags/%E8%A1%8C%E5%8F%B7/"}]},{"title":"cp命令[15]","slug":"cp命令_15","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-26T07:13:25.000Z","comments":true,"path":"cp命令_15.html","link":"","permalink":"http://man.fcwalkers.com/cp%E5%91%BD%E4%BB%A4_15.html","excerpt":"","text":"cp命令用途较多除了简单复制文件外，还可以用来完整备份目录和比较文件新旧后再复制，或者创建一个链接。 选项与参数：123456789-d ：若来源文件为链接文件的属性（link file），则复制链接文件属性而非文件本身；-i ：若目标文件（destination）已经存在时，在覆盖时会先询问动作的进行（常用）-p ：连同文件的属性（权限、用户、时间）一起复制过去，而非使用默认属性（备份常用）；-r ：递归持续复制，用于目录的复制行为；（常用）-l ：进行硬式链接（hard link）的链接文件创建，而非复制文件本身；-s ：复制成为符号链接文件 （symbolic link），亦即“捷径”文件；-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；（常用） 示例 一般用法 cp [选项] [来源] [目标]","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"复制","slug":"复制","permalink":"http://man.fcwalkers.com/tags/%E5%A4%8D%E5%88%B6/"},{"name":"备份","slug":"备份","permalink":"http://man.fcwalkers.com/tags/%E5%A4%87%E4%BB%BD/"}]},{"title":"find命令[21]","slug":"find命令_21","date":"2019-03-25T16:00:00.000Z","updated":"2023-06-29T07:01:52.231Z","comments":true,"path":"find命令_21.html","link":"","permalink":"http://man.fcwalkers.com/find%E5%91%BD%E4%BB%A4_21.html","excerpt":"","text":"find命令用于查找指定目录下的文件，使用该命令时，不设置任何参数，则将在当前目录下查找子目录与文件，并且将查找到的子目录和文件全部进行显示。find命令是硬盘搜索，所以速度会相对很慢。 选项与参数：123456789101112131415161718192021222324252627282930313233343536373839401. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明 -mtime n ：n 为数字，意义为在 n 天之前的“一天之内”被更动过内容的文件 -mtime +n ：列出在 n 天之前（不含 n 天本身）被更动过内容的文件文件名 -mtime -n ：列出在 n 天之内（含 n 天本身）被更动过内容的文件文件名 -newer file ：file 为一个存在的文件，列出比 file 还要新的文件文件名 2. 与使用者或群组名称有关的参数： -uid n ：n 为数字，这个数字是使用者的帐号 ID，亦即 UID ，这个 UID 是记录在/etc/passwd 里面与帐号名称对应的数字。 -gid n ：n 为数字，这个数字是群组名称的 ID，亦即 GID，这个 GID 记录在/etc/group -user name ：name 为使用者帐号名称！例如 dmtsai -group name：name 为群组名称喔，例如 users ； -nouser ：寻找文件的拥有者不存在 /etc/passwd 的人！ -nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件！ 当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者， 这是可能的！在这个时候，就可以使用 -nouser 与 -nogroup 搜寻。3. 与文件权限及名称有关的参数： -name filename ：搜寻文件名称为 filename 的文件； -size [+-]SIZE ：搜寻比 SIZE 还要大（+）或小（-）的文件。这个 SIZE 的规格有： c: 代表 Byte， k: 代表 1024Bytes。 所以，要找比50KB还要大的文件，就是“ -size +50k” -type TYPE ：搜寻文件的类型为 TYPE 的， 类型主要有： 一般正规文件（f）, 设备文件（b, c）, 目录（d）, 链接文件（l）, socket（s）, 及 FIFO（p） 等属性。 -perm mode ：搜寻文件权限“刚好等于” mode 的文件，这个 mode 为类似 chmod的属性值，例如，-rwsr-xr-x 的属性为 4755 ！ -perm -mode ：搜寻文件权限“必须要全部囊括 mode 的权“限”的文件。 -perm /mode : 任何权限位 mode 被设置了的文件。4. 额外可进行的动作： -exec command ; ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果，&#123;&#125; 符号表示搜索到的文件名，然后要使用 \\ 进行转义子防止符号意义被扩展，最后以 ; 结尾(见下面示例)。 -print ：将结果打印到屏幕上，这个动作是默认动作！5. 其他参数： -inum n : 指定文件的 inode 号码 n（可使用 ls -i 查看 inode 号码）。 -delete : 删除找到的文件。默认带有 -depth 选项深度删除。 示例 一般用法 find [选项] [目标] 根据权限查询 1234[root@study ~]# find / -perm +7000 #所谓的 7000 就是 ---s--s--t ，那么只要含有 s 或 t 的就列出，所以当然要使用 /7000，#使用 -7000 表示要同时含有 ---s--s--t 的所有三个权限。而只需要任意一个，就是 /7000(旧版是：-perm +7000已经被/7000替换) -exec的使用 12[root@study ~]# find / -name &quot;passwd&quot; -exec ls -l &#123;&#125; \\;#-exec 后面不支持别名所以上面使用 ls -l ;&#123;&#125; 代表的是“由find找到的内容","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"磁盘","slug":"磁盘","permalink":"http://man.fcwalkers.com/tags/%E7%A3%81%E7%9B%98/"},{"name":"搜索","slug":"搜索","permalink":"http://man.fcwalkers.com/tags/%E6%90%9C%E7%B4%A2/"}]},{"title":"locate命令[20]","slug":"locate命令_20","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-26T08:41:59.000Z","comments":true,"path":"locate命令_20.html","link":"","permalink":"http://man.fcwalkers.com/locate%E5%91%BD%E4%BB%A4_20.html","excerpt":"","text":"locate寻找的数据是由/var/lib/mlocate里面的数据搜索到的,所以不用搜索硬盘,速度快。但由于数据库默认每天创建一次，所以新建的文件可能搜索不到，或者已删除文件还能搜索到。当然也可以使用updatedb命令手动更新数据库。当执行updatedb命令时，系统会根据/etc/updatedb.conf的设置去搜寻系统硬盘内的文件名，并更新/var/lib/mlocate内的数据库文件，因为updatedb会去搜寻硬盘，所以当你执行updatedb时，可能会等待数分钟的时间。 选项与参数：12345-i : 忽略大小写的差异-c : 不输出文件名，仅计算找到的文件数量-l : 仅输出几行的意思，例如输出五行则是 -l 5-r : 后面可接正则表达式的显示方式 -S : 输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等 示例 一般用法 locate [选项] [目标文件]","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"搜索","slug":"搜索","permalink":"http://man.fcwalkers.com/tags/%E6%90%9C%E7%B4%A2/"},{"name":"数据库","slug":"数据库","permalink":"http://man.fcwalkers.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"ls命令[13]","slug":"ls命令_13","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-26T09:29:03.000Z","comments":true,"path":"ls命令_13.html","link":"","permalink":"http://man.fcwalkers.com/ls%E5%91%BD%E4%BB%A4_13.html","excerpt":"","text":"ls命令用于显示目录与文件的命令，该命令默认以文件名排序展示，也可以通过不同选项以不同的形式展示列表。 选项与参数：12345678910111213141516171819-a ：全部的文件，连同隐藏文件（ 开头为 . 的文件） 一起列出来（常用）-A ：全部的文件，连同隐藏文件，但不包括 . 与 .. 这两个目录-d ：仅列出目录本身，而不是列出目录内的文件数据（常用）-f ：直接列出结果，而不进行排序 （ls 默认会以文件名排序！）-F ：根据文件、目录等信息，给予附加数据结构，例如： *:代表可可执行文件； /:代表目录； =:代表 socket 文件； |:代表 FIFO 文件；-h ：将文件大小以人类较易读的方式（例如 GB, KB 等等）列出来；-i ：列出 inode 号码，inode 的意义下一章将会介绍；-l ：长数据串行出，包含文件的属性与权限等等数据；（常用）-n ：列出 UID 与 GID 而非使用者与群组的名称 （UID与GID会在帐号管理提到！）-r ：将排序结果反向输出，例如：原本文件名由小到大，反向则为由大到小；-R ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；-S ：以文件大小大小排序，而不是用文件名排序；-t ：依时间排序，而不是用文件名。--color=never ：不要依据文件特性给予颜色显示；--color=always ：显示颜色--color=auto ：让系统自行依据设置来判断是否给予颜色--full-time ：以完整时间模式 （包含年、月、日、时、分） 输出--time=&#123;atime,ctime&#125; ：输出(atime)时间或改变权限属性时间(ctime),而非内容变更时间 （modification time） 示例 一般用法 ls [选项] [参数] 123456[root@study /]# ls -ltotal 6291476lrwxrwxrwx. 1 root root 7 Jan 22 2018 bin -&gt; usr/bindr-xr-xr-x. 5 root root 4096 Jan 29 2018 bootdrwxr-xr-x 19 root root 3000 Jun 14 2018 dev……省略 列表显示文件读取时间 12345# 列表默认显示内容变更时间，通过--time可以改变展示的时间类型[root@study /]# ls -l --time=atimelrwxrwxrwx. 1 root root 7 Mar 26 12:01 bin -&gt; usr/bindr-xr-xr-x. 5 root root 4096 Jul 5 2018 bootdrwxr-xr-x 19 root root 3000 Dec 9 19:14 dev 扩展 -l选项字段说明 1.文件属性：drwxr-xr-x2.文件硬链接数量 33.所有者：user4.所属用户组：group5.文件大小：102 byte6.修改时间：Mar11 22:567.文件名：Filename 第一个字段第一个字符意义:当为[ d ]则是目录，例如上面示例文件名为“boot”的那一行；当为[ - ]则是文件；若是[ l ]则表示为链接文件（link file）；若是[ b ]则表示为设备文件里面的可供储存的周边设备（可随机存取设备）；若是[ c ]则表示为设备文件里面的序列埠设备，例如键盘、鼠标（一次性读取设备）。 文件时间modification time （mtime）：当该文件的“内容数据”变更时，就会更新这个时间！内容数据指的是文件的内容，而不是文件的属性或权限！status time （ctime）：当该文件的“状态 （status）”改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间啊。access time （atime）：当“该文件的内容被取用”时，就会更新这个读取时间 （access）。举例来说，我们使用 cat 去读取 /etc/man_db.conf ， 就会更新该文件的 atime 了。","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"目录","slug":"目录","permalink":"http://man.fcwalkers.com/tags/%E7%9B%AE%E5%BD%95/"},{"name":"列表","slug":"列表","permalink":"http://man.fcwalkers.com/tags/%E5%88%97%E8%A1%A8/"}]},{"title":"nl命令[17]","slug":"nl命令_17","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-29T09:10:33.000Z","comments":true,"path":"nl命令_17.html","link":"","permalink":"http://man.fcwalkers.com/nl%E5%91%BD%E4%BB%A4_17.html","excerpt":"","text":"nl命令用于将文件内容从第一行开始打印到标准输出中并打印出行号。与cat -n的区别是nl命令默认不打印空行行号，并且nl命令可以将行号做更多的显示设计，包括位数与自动补齐功能等等。 选项与参数：123456789-b : 指定行号指定的方式，主要有两种： -b a : 表示不论是否为空行，也同样列出行号(类似 cat -n) -b t : 如果有空行，空的那一行不要列出行号(默认值)-n : 列出行号表示的方法，主要有三种： -n ln : 行号在萤幕的最左方显示 -n rn : 行号在自己栏位的最右方显示，且不加 0 -n rz : 行号在自己栏位的最右方显示，且加 0 -w : 行号栏位的占用的位数。(与-n ln 或 -n rz配合使用)-p : 在逻辑定界符处不重新开始计算 示例 一般用法 nl [选项] [目标文件]","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"审阅","slug":"审阅","permalink":"http://man.fcwalkers.com/tags/%E5%AE%A1%E9%98%85/"},{"name":"行号","slug":"行号","permalink":"http://man.fcwalkers.com/tags/%E8%A1%8C%E5%8F%B7/"}]},{"title":"touch命令[14]","slug":"touch命令_14","date":"2019-03-25T16:00:00.000Z","updated":"2021-04-21T07:05:59.000Z","comments":true,"path":"touch命令_14.html","link":"","permalink":"http://man.fcwalkers.com/touch%E5%91%BD%E4%BB%A4_14.html","excerpt":"","text":"touch命令有两个功能：一是不加任何选项用来创建一个空文件;另一个是加选项用来修改文件时间1为当前时间或是指定的特殊时间。 选项与参数：12345-a ：仅修订 access time-c ：仅修改文件的时间，若该文件不存在则不创建新文件-m ：仅修改 mtime-t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]-d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 --date=&quot;日期或时间&quot; 示例 一般用法 touch [选项] [文件] 创建一个空文件 1[root@study /tmp] touch test.txt 修改文件读取时间 1[root@study /tmp] touch -a test.txt 扩展 文件时间 关于文件时间请阅读 ls 命令扩展内容。","categories":[],"tags":[{"name":"时间","slug":"时间","permalink":"http://man.fcwalkers.com/tags/%E6%97%B6%E9%97%B4/"},{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"}]},{"title":"whereis命令[19]","slug":"whereis命令_19","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-26T08:34:05.000Z","comments":true,"path":"whereis命令_19.html","link":"","permalink":"http://man.fcwalkers.com/whereis%E5%91%BD%E4%BB%A4_19.html","excerpt":"","text":"whereis命令用来查询特定文件夹下的二进制程序、源代码和man帮助手册等文件。 选项与参数：12345-l : 可以列出 whereis 会去查询的几个主要目录而已-b : 只找 binary 格式的文件-m : 只找在说明文档 manual 路径下的文件-s : 只找 source 来源文件-u : 搜寻不在上述三个项目当中的其他特殊文件 示例 一般用法 whereis [选项] [目标文件]","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"搜索","slug":"搜索","permalink":"http://man.fcwalkers.com/tags/%E6%90%9C%E7%B4%A2/"}]},{"title":"which命令[18]","slug":"which命令_18","date":"2019-03-25T16:00:00.000Z","updated":"2019-03-26T08:26:09.000Z","comments":true,"path":"which命令_18.html","link":"","permalink":"http://man.fcwalkers.com/which%E5%91%BD%E4%BB%A4_18.html","excerpt":"","text":"which命令默认查询系统环境变量$PATH内所规范的目录第一个被找到的可执行文件，注意bash内建命令不能用which查找，内置命令可以通过type命令查找。 选项与参数：12345-a : 将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称-w : 指定输出时栏位的宽度-V : 显示版本信息-n&lt;文件名长度&gt; : 制定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名-p&lt;文件名长度&gt; :与-n参数相同，但此处的&lt;文件名长度&gt;包含了文件的路径 示例 一般用法 which [选项] [目标指令]","categories":[],"tags":[{"name":"搜索","slug":"搜索","permalink":"http://man.fcwalkers.com/tags/%E6%90%9C%E7%B4%A2/"},{"name":"命令","slug":"命令","permalink":"http://man.fcwalkers.com/tags/%E5%91%BD%E4%BB%A4/"}]},{"title":"bzip2命令[5]","slug":"bzip2命令_5","date":"2019-03-22T16:00:00.000Z","updated":"2019-04-03T06:10:40.000Z","comments":true,"path":"bzip2命令_5.html","link":"","permalink":"http://man.fcwalkers.com/bzip2%E5%91%BD%E4%BB%A4_5.html","excerpt":"","text":"压缩指令，与gzip用法类似,比gzip压缩比更好，后缀为*.bz2 选项与参数：123456-c ：将压缩的过程产生的数据输出到屏幕上！-d ：解压缩的参数-k ：保留原始文件，而不会删除原始的文件喔！-z ：压缩的参数 （默认值，可以不加）-v ：可以显示出原文件/压缩文件的压缩比等信息；-# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！ 示例 一般用法bzip2 [-cdkzv#] 文件名 相关辅助命令还有，bzcat/bzmore/bzless/bzgrep。","categories":[],"tags":[{"name":"压缩","slug":"压缩","permalink":"http://man.fcwalkers.com/tags/%E5%8E%8B%E7%BC%A9/"},{"name":"解压缩","slug":"解压缩","permalink":"http://man.fcwalkers.com/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"}]},{"title":"df命令[9]","slug":"df命令_9","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T14:22:02.000Z","comments":true,"path":"df命令_9.html","link":"","permalink":"http://man.fcwalkers.com/df%E5%91%BD%E4%BB%A4_9.html","excerpt":"","text":"列出文件系统的整体磁盘使用情况，默认显示单位为KB，主要读取的数据几乎都是针对一整个文件系统，因此读取的范围主要是在 Superblock 内的信息， 所以这个指令显示结果的速度非常的快速。 选项与参数：1234567-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统-k ：以 KBytes 的容量显示各文件系统-m ：以 MBytes 的容量显示各文件系统-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示-i ：不用磁盘容量，而以 inode 的数量来显示-H ：以 M=1000K 取代 M=1024K 的进位方式-T ：连同该 partition 的 filesystem 名称 （例如 xfs） 也列出 示例 一般用法 df [选项] [目录或文件名] 12#显示磁盘根目录的使用情况使用易阅读格式显示[root@study]# df -h /","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"磁盘","slug":"磁盘","permalink":"http://man.fcwalkers.com/tags/%E7%A3%81%E7%9B%98/"}]},{"title":"gzip命令[4]","slug":"gzip命令_4","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T14:22:36.000Z","comments":true,"path":"gzip命令_4.html","link":"","permalink":"http://man.fcwalkers.com/gzip%E5%91%BD%E4%BB%A4_4.html","excerpt":"","text":"gzip是目前应用最广的压缩指令,后缀为*.gz，如果压缩的文件是文本文件,压缩后可以使用zcat相关指令读取出来. 选项与参数：12345-c ：将压缩的数据输出到屏幕上，可通过数据流重导向来处理；-d ：解压缩的参数；-t ：可以用来检验一个压缩文件的一致性～看看文件有无错误；-v ：可以显示出原文件/压缩文件的压缩比等信息；-# ：#为数字的意思，代表压缩等级，-1最快，但是压缩比最差、-9最慢，但是压缩比最好！默认是 -6 示例 一般用法gzip [-cdtv#] 文件名 gzip压缩默认会删除原文件,如果想保留原文件可以使用如下命令: 12[root@study tmp]# gzip -9 -c services &gt; services.gz-c 选项打印出文件到屏幕,然后使用 &gt; 重定向 找出压缩文件中的关键字: 12345[root@study tmp]# zgrep -n &#x27;http&#x27; services.gz14:# http://www.iana.org/assignments/port-numbers89:http 80/tcp www www-http # WorldWideWeb HTTP90:http 80/udp www www-http # HyperText Transfer Protocol.....（下面省略）..... 类似命令还有，zcat/zmore/zless/zgrep。","categories":[],"tags":[{"name":"压缩","slug":"压缩","permalink":"http://man.fcwalkers.com/tags/%E5%8E%8B%E7%BC%A9/"},{"name":"解压缩","slug":"解压缩","permalink":"http://man.fcwalkers.com/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"}]},{"title":"ln命令[11]","slug":"ln命令_11","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T14:13:07.000Z","comments":true,"path":"ln命令_11.html","link":"","permalink":"http://man.fcwalkers.com/ln%E5%91%BD%E4%BB%A4_11.html","excerpt":"","text":"ln命令用来为某一个文件在另外一个位置建立一个同不的链接，连接类型分为硬连接和符号连接两种，其中符号链接最为常用，符号链接类似于Windows系统中的快捷方式。 选项与参数：12-s ：如果不加任何参数就进行链接，那就是hard link，至于 -s 就是symbolic link-f ：如果 目标文件 存在时，就主动的将目标文件直接移除后再创建！ 示例 一般用法 ln [选项] 来源文件 目标文件 12345# 将crontab2链接到/etc/crontab文件[root@study ~]# ln -s /etc/crontab crontab2[root@study ~]# ll -i /etc/crontab /root/crontab234474855 -rw-r--r--. 2 root root 451 Jun 10 2014 /etc/crontab53745909 lrwxrwxrwx. 1 root root 12 Jun 23 22:31 /root/crontab2 -&gt; /etc/crontab 上面结果我们可以知道两个文件指向不同的inode号码，当然就是两个独立的文件存在！ 而且链接文件的重要内容就是他会写上目标文件的文件名， 你可以发现为什么上表中链接文件的大小为12 Bytes呢？ 因为箭头（--&gt;）右边的文件名/etc/crontab总共有 12 个英文，每个英文占用 1 个 Bytes ，所以文件大小就是 12Bytes了！ 扩展 Hard Link （实体链接, 硬式链接或实际链接）由于每个文件都占用一个inode,文件内容由inode记录指向,想要读取文件必须经过目录记录的文件名来指向到正确的inode号码才能读取.也就是说,其实文件名只与目录有关,但是文件内容则与inode有关.如果有多个文件名对应一个inode,那就是实体链接的由来. 实体链接限制： 不能跨FileSystem 不能链接目录 如果hard link到链接到目录时,链接的数据需要连同被链接目录下面的所有数据都创建链接，举例来说，如果你要将 /etc 使用实体链接创建一个 /etc_hd 的目录时，那么在 /etc_hd 下面的所有文件名同时都与 /etc 下面的文件名要创建 hard link 的，而不是仅链接到 /etc_hd 与 /etc 而已。 并且，未来如果需要在 /etc_hd 下面创建新文件时，连带的， /etc 下面的数据又得要创建一次 hard link ，因此造成环境相当大的复杂度.所以，目前 hard link 对于目录暂时还是不支持的啊！ Symbolic Link(符号链接)Symbolic link 就是在创建一个独立的文件，而这个文件会让数据的读取指向他链接的那个文件的文件名！由于只是利用文件来做为指向的动作， 所以，当来源文件被删除之后，symbolic link 的文件会无法打开， 会一直提示“无法打开某文件！”。实际上就是找不到原始“文件名”而已！","categories":[],"tags":[{"name":"文件","slug":"文件","permalink":"http://man.fcwalkers.com/tags/%E6%96%87%E4%BB%B6/"},{"name":"磁盘","slug":"磁盘","permalink":"http://man.fcwalkers.com/tags/%E7%A3%81%E7%9B%98/"},{"name":"实体链接","slug":"实体链接","permalink":"http://man.fcwalkers.com/tags/%E5%AE%9E%E4%BD%93%E9%93%BE%E6%8E%A5/"},{"name":"符号链接","slug":"符号链接","permalink":"http://man.fcwalkers.com/tags/%E7%AC%A6%E5%8F%B7%E9%93%BE%E6%8E%A5/"}]},{"title":"shutdown命令[12]","slug":"shutdown命令_12","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T14:21:13.000Z","comments":true,"path":"shutdown命令_12.html","link":"","permalink":"http://man.fcwalkers.com/shutdown%E5%91%BD%E4%BB%A4_12.html","excerpt":"","text":"系统关机命令。 选项与参数：12345-k ：不要真的关机，只是发送警告讯息出去！ -r ：在将系统的服务停掉之后就重新开机（常用） -h ：将系统的服务停掉后，立即关机。 （常用） -c ：取消已经在进行的 shutdown 指令内容时间 ：指定系统关机的时间！时间的范例下面会说明。若没有这个项目，则默认 1 分钟后自动进行 示例 一般用法 shutdown [-krhc] [时间] [警告讯息]","categories":[],"tags":[{"name":"开机","slug":"开机","permalink":"http://man.fcwalkers.com/tags/%E5%BC%80%E6%9C%BA/"},{"name":"关机","slug":"关机","permalink":"http://man.fcwalkers.com/tags/%E5%85%B3%E6%9C%BA/"}]},{"title":"tar命令[3]","slug":"tar命令_3","date":"2019-03-22T16:00:00.000Z","updated":"2023-06-29T07:17:50.932Z","comments":true,"path":"tar命令_3.html","link":"","permalink":"http://man.fcwalkers.com/tar%E5%91%BD%E4%BB%A4_3.html","excerpt":"","text":"虽然Linux压缩命令也能够针对目录来进行压缩，不过这些个指令对目录的压缩指的是“将目录内的所有文件 “分别” 进行压缩”的动作！而不像在 Windows 的系统，可以使用类似 WinRAR 这一类的压缩软件来将好多数据“包成一个文件”的样式。tar命令可以解决以上问题，同时tar命令也就常用于备份操作。 选项与参数：12345678910111213141516-c ：创建打包文件，可搭配 -v 来察看过程中被打包的文件名（filename）-t ：察看打包文件的内容含有哪些文件名，重点在察看“文件名”就是了；-x ：解打包或解压缩的功能，可以搭配 -C （大写） 在特定目录解开 特别留意的是， -c, -t, -x 不可同时出现在一串命令行中。-z ：通过 gzip 的支持进行压缩/解压缩：此时文件名最好为 *.tar.gz-j ：通过 bzip2 的支持进行压缩/解压缩：此时文件名最好为 *.tar.bz2-J ：通过 xz 的支持进行压缩/解压缩：此时文件名最好为 *.tar.xz 特别留意， -z, -j, -J 不可以同时出现在一串命令行中-v ：在压缩/解压缩的过程中，将正在处理的文件名显示出来！-f filename：-f 后面要立刻接要被处理的文件名！建议 -f 单独写一个选项啰！（比较不会忘记）-C 目录 ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。其他后续练习会使用到的选项介绍：-p（小写） ：保留备份数据的原本权限与属性，常用于备份（-c）重要的配置文件-P（大写） ：保留绝对路径，亦即允许备份数据中含有根目录存在之意；--exclude=FILE：在压缩的过程中，不要将 FILE 打包！(多个文件使用多个 --exclude=文件(夹)名) 示例 打包与压缩tar [-z|-j|-J][cv][-f 待创建的新文件名] filename... 12345# gzip 压缩打包[root@study ~] tar -czvf etc.tar.gz /etc# 排除指定文件tar --exclude=shadow- etc.tar.gz /etc 察看文件名tar [-z|-j|-J][tv] [-f 既有的 tar文件名] 解压缩tar [-z|-j|-J] [xv] [-f 既有的 tar文件名][-C 目录] 解压tar包内单一文件 12345678910111213141516# 1. 先找到我们要的文件名，假设解开 shadow 文件好了：[root@study ~]# tar -jtv -f /root/etc.tar.bz2 | grep &#x27;shadow&#x27;---------- root/root 721 2015-06-17 00:20 etc/gshadow---------- root/root 1183 2015-06-17 00:20 etc/shadow----------- root/root 1210 2015-06-17 00:20 etc/shadow &lt;==这是我们要的！---------- root/root 707 2015-06-17 00:20 etc/gshadow-# 2. 将该文件解开！语法与实际作法如下：[root@study ~]# tar -jxv -f 打包档.tar.bz2 待解开文件名[root@study ~]# tar -jxv -f /root/etc.tar.bz2 etc/shadowetc/shadow[root@study ~]# ll etctotal 4----------. 1 root root 1210 Jun 17 00:20 shadow# 此时只会解开一个文件而已！不过，要找到正确的文件名。# 在本例中，你不能写成 /etc/shadow ！因为记录在 etc.tar.bz2 内的并没有 / 之故！ tar备份 123456789[root@study ~]# su - # 因为备份 /etc 需要 root 的权限，否则会出现一堆错误[root@study ~]# time tar -zpcv -f /root/etc.tar.gz /etctar: Removing leading `/&#x27; from member names &lt;==注意这个警告讯息/etc/....（中间省略）..../etc/hostname#多了time会显示程序运行时间#加上&quot;-p&quot;选项原因是为了保存原本文件的权限和属性 tar备份默认是没有根目录的,那为什么要拿掉根目录呢？主要是为了安全！我们使用 tar 备份的数据可能会需要解压缩回来使用， 在 tar 所记录的文件名 （就是我们刚刚使用 tar -jtvf 所察看到的文件名） 那就是解压缩后的实际文件名。 如果拿掉了根目录，假设你将备份数据在 /tmp 解开，那么解压缩的文件名就会变成/tmp/etc/xxx。 但“如果没有拿掉根目录，解压缩后的文件名就会是绝对路径， 亦即解压缩后的数据一定会被放置到 /etc/xxx 去！如此一来，你的原本的 /etc/ 下面的数据， 就会被备份数据所覆盖过去了！如果想保存根目录可以使用-P选项","categories":[],"tags":[{"name":"压缩","slug":"压缩","permalink":"http://man.fcwalkers.com/tags/%E5%8E%8B%E7%BC%A9/"},{"name":"解压缩","slug":"解压缩","permalink":"http://man.fcwalkers.com/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"},{"name":"打包","slug":"打包","permalink":"http://man.fcwalkers.com/tags/%E6%89%93%E5%8C%85/"}]},{"title":"unzip命令[8]","slug":"unzip命令_8","date":"2019-03-22T16:00:00.000Z","updated":"2022-08-22T09:27:50.698Z","comments":true,"path":"unzip命令_8.html","link":"","permalink":"http://man.fcwalkers.com/unzip%E5%91%BD%E4%BB%A4_8.html","excerpt":"","text":"unzip命令用于将zip命令压缩的.zip格式文件解压。 选项与参数：12345678910111213-l : 显示文件夹包含的文件 -t : 检查压缩文件是否正确-v : 执行时显示详细信息-j : 不处理压缩文件中原有的目录路径-n : 解压缩时不覆盖原有的文件-o : 解压时不询问用户，直接覆盖原有文件-O : 解压指定编码格式（可以解决某些情况中文乱码问题）-q : 执行时不显示任何信息-s : 将文件名中的空白字符转换为底线字符-z : 仅显示压缩文件的备注文字-d&lt;目录&gt; : 指定文件解压缩后所要存储的目录-P&lt;密码&gt; : 使用zip密码选项-x&lt;文件&gt; : 指定不要处理.zip压缩文件中的哪些文件 示例 一般用法 zip [选项] 压缩文件名 [其它选项] 12#将tomcat.zip解压到/tmp目录，如果文件存在不覆盖[root@study]# unzip -n tomcat.zip -d /tmp 指定编码 12# windows 文件编码格式为 GBK 而不是 Linux 的 UFT-8 遇到中文时有时需要指定编码，否则会产生乱码[root@study]# unzip -O GBK file-zh.zip","categories":[],"tags":[{"name":"解压缩","slug":"解压缩","permalink":"http://man.fcwalkers.com/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"}]},{"title":"xz命令[6]","slug":"xz命令_6","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T03:32:36.000Z","comments":true,"path":"xz命令_6.html","link":"","permalink":"http://man.fcwalkers.com/xz%E5%91%BD%E4%BB%A4_6.html","excerpt":"","text":"压缩指令，与gzip,bzip2用法类似,比bzip2压缩比更好，后缀为*.xz。 选项与参数：1234567选项与参数：-d ：就是解压缩啊！-t ：测试压缩文件的完整性，看有没有错误-l ：列出压缩文件的相关信息-k ：保留原本的文件不删除～-c ：同样的，就是将数据由屏幕上输出的意思！-# ：计算压缩比的参数， -9 压缩比最佳但是速度最慢， -1 速度最快但是压缩比最差！ 示例 一般用法xz [-dtlkc#] 文件名 相关辅助命令还有，xzcat/xzmore/xzless/xzgrep。","categories":[],"tags":[{"name":"压缩","slug":"压缩","permalink":"http://man.fcwalkers.com/tags/%E5%8E%8B%E7%BC%A9/"},{"name":"解压缩","slug":"解压缩","permalink":"http://man.fcwalkers.com/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"}]},{"title":"zip命令[7]","slug":"zip命令_7","date":"2019-03-22T16:00:00.000Z","updated":"2019-03-23T14:22:13.000Z","comments":true,"path":"zip命令_7.html","link":"","permalink":"http://man.fcwalkers.com/zip%E5%91%BD%E4%BB%A4_7.html","excerpt":"","text":"zip命令用于将目标文件或文件夹压缩为.zip格式。 选项与参数：1234567891011-d : 从压缩文件内删除指定文件-D : 压缩文件内不建立目录名称-h : 压线帮助-m : 将压缩文件压缩后删除原始文件-q : 不显示执行过程(安静模式)-v : 显示指令执行过程或显示版本信息-r : 递归压缩子目录下所有文件-z : 替压缩文件加上注释-&lt;压缩效率&gt; : 设置压缩效率1-9的数值-P&lt;压缩密码&gt; : 设置压缩密码-n&lt;字尾字符串&gt; : 不压缩指定字符结尾的文件 示例 一般用法 zip [选项] 压缩文件名 被压缩文件 12#压缩目录tmp为tmp.zip文件[root@study]# zip -r tmp.zip /tmp","categories":[],"tags":[{"name":"压缩","slug":"压缩","permalink":"http://man.fcwalkers.com/tags/%E5%8E%8B%E7%BC%A9/"}]},{"title":"sed命令[1]","slug":"sed命令_1","date":"2019-03-21T16:00:00.000Z","updated":"2021-10-08T06:23:10.000Z","comments":true,"path":"sed命令_1.html","link":"","permalink":"http://man.fcwalkers.com/sed%E5%91%BD%E4%BB%A4_1.html","excerpt":"","text":"sed 是一个管线命令，将读取的数据进行取代、删除、新增、撷取特定行等功能并输出到屏幕，该功能默认不会修改原有文件。可以通过-i选项来修改原文件。 选项与参数：1234567891011121314151617-n ：使用安静（silent）模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到屏幕上。 但如果加上 -n 参数后，则只有经过 sed 特殊处理的那一行（或者动作）才会被列出来。-e ：直接在命令行界面上进行 sed 的动作编辑；-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以执行 filename 内的 sed 动作；-r ：sed 的动作支持的是延伸型正则表达式的语法。（默认是基础正则表达式语法）-i ：直接修改读取的文件内容，而不是由屏幕输出。动作说明： [n1[,n2]]functionn1, n2 ：不见得会存在，一般代表“选择进行动作的行数”，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则“ 10,20[动作行为] ”function 有下面这些：a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现（目前的下一行）～c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现（目前的上一行）；p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～s ：取代，可以直接进行取代的工作！通常这个 s 的动作可以搭配正则表达式！ 示例 以行为单位的功能 1234567891011121314# 将/etc/passwd 的内容列出并且打印行号，同时，请将第 2~5 行删除！[root@study ~]# nl /etc/passwd | sed &#x27;2,5d&#x27; 1 root:x:0:0:root:/root:/bin/bash 6 sync:x:5:0:sync:/sbin:/bin/sync 7 shutdown:x:6:0:shutdown:/sbin:/sbin/ shutdown .....（后面省略）..... # 承上，在第二行后（亦即是加在第三行）加上“drink tea?”字样！[root@study ~]# nl /etc/passwd | sed &#x27;2a drink tea&#x27; 1 root:x:0:0:root:/root:/bin/bash 2 bin:x:1:1:bin:/bin:/sbin/nologin drink tea 3 daemon:x:2:2:daemon:/sbin:/sbin/nologin .....（后面省略）..... 部分数据的搜索与取代功能 sed &#39;s/要被取代的字串(或正则)/新的字串/g&#39; 如果想用以行为单位取代 sed &#39;n1,n2s/要被取代的字串(或正则)/新的字串/g&#39; 直接修改文件内容（危险动作） -i 选项可以让 sed 直接去修改后面接的文件内容而不是由屏幕输出！ 123456#用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !$ sed -i &#x27;s/\\.$/\\!/g&#x27; regular_express.txt#利用 sed 直接在 regular_express.txt 最后一行加 入“# This is a test”$ sed -i &#x27;$a # This is a test&#x27; regular_express.txt# 由于 $ 代表的是最后一行，而 a 的动作是新增，因此该 文件最后新增！ 正则读取 配合 -n p使用读取文件匹配内容 sed -n &#39;/正则表达式/p&#39; 文件名 1sed -n &#x27;/graphs.*\\]/p&#x27; rest-server.properties","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"分割","slug":"分割","permalink":"http://man.fcwalkers.com/tags/%E5%88%86%E5%89%B2/"},{"name":"撷取","slug":"撷取","permalink":"http://man.fcwalkers.com/tags/%E6%92%B7%E5%8F%96/"}]},{"title":"awk命令[2]","slug":"awk命令_2","date":"2019-03-20T16:00:00.000Z","updated":"2020-11-06T02:55:39.000Z","comments":true,"path":"awk命令_2.html","link":"","permalink":"http://man.fcwalkers.com/awk%E5%91%BD%E4%BB%A4_2.html","excerpt":"","text":"awk是一种编程式语言，它具有一般程式语言常见的功能。相对于sed处理行数据，awk则比经常用于一行当中分成数个字段来处理。因此，awk 比较适合处理小型的数据处理！awk 后面接两个单引号并加上大括号 &#123;&#125; 来设置想要对数据进行的处理动作。 awk 可以处理后续接的文件，也可以读取来自前个指令的标准输出。通常awk主要是处理每一行的字段内的数据，默认的字段的分隔符号为 空白符 或 [tab]符 选项与参数：123-F : 指定输入分隔符，fs可以是字符串或正则表达式-v : var=value 赋值一个用户定义变量，将外部变量传递给awk-f : scriptfile 从脚本文件中读取awk命令 内置变量 变量名称 意义 $0 awk读取的当前(行)数据 $N 当前读取的数据的每个字段从1开始，如 $1、$2…… NF 每一行($0)拥有的字段总数 NR 当前所处理的是第几行数据 FS 目前的分割符（默认，空白符) ARGC 命令行参数的数目 ARGIND 命令行中当前文件的位置（从0开始算） ARGV 包含命令行参数的数组 CONVFMT 数字转换格式（默认值为%.6g） ENVIRON 环境变量关联数组 ERRNO 最后一个系统错误的描述 FIELDWIDTHS 字段宽度列表（用空格键分隔） FILENAME 当前输入文件的名 FNR 同NR，但相对于当前文件 IGNORECASE 如果为真，则进行忽略大小写的匹配 OFMT 数字的输出格式（默认值是%.6g） OFS 输出字段分隔符（默认值是一个空格） ORS 输出记录分隔符（默认值是一个换行符） RS 记录分隔符（默认是一个换行符） RSTART 由match函数所匹配的字符串的第一个位置 RLENGTH 由match函数所匹配的字符串的长度 SUBSEP 数组下标分隔符（默认值是34） 算术运算符 符号 意义 + - 加，减 * / &amp; 乘，除与求余 + - ! 一元加，减和逻辑非 ^ *** 求幂 ++ -- 自增，自减 赋值运算符 符号 意义 = += -= *= /= %= ^= **= 赋值符号 关系运算符 符号 意义 > 大于 >= 大于等于 &lt; 小于 &lt;= 小于等于 == 等于 != 不等于 逻辑运算符 符号 意义 &#124;&#124; 逻辑或 &amp;&amp; 逻辑与 正则运算符 符号 意义 ~ 匹配正则表达式 ~! 不匹配正则表达式 其它符号 符号 意义 空白符 字符串连接符 ? : C条件表达式三元运算符 in 数组成员是否存在 关键字 关键字 意义 BEGIN awk读取数据开始前 END awk读取所有数据结束后 工作流程执行awk时它会反复进行如下四步： 自动从指定的数据中读取一行 自动更新相关的内建变量值，如：NF、NR、$0、$1…… 逐次执行程式中的条件和动作 执行程式中的所有条件和动作执行完成后，若还有处理数据，则反复执行1~4步骤。 综上，awk是以行为一次处理单位，以字段为最小处理单位。 示例 一般用法awk &#39;条件类型1&#123;动作1&#125; 条件类型2&#123;动作2&#125; ...&#39; filename 12#取出前5条登陆数据，并通过print打印出分割数据用户名和ip[root@study ~]# last -n 5 | awk &#x27;&#123;print $1 &quot;\\t&quot; $3&#125;&#x27; 设置分割符 12345#默认分割符为&quot;空白符&quot;[Windus@study ~]$ awk -F: &#x27;&#123; print $NF &#125;&#x27; /etc/passwd或[Windus@study ~]$ awk &#x27;BEGIN&#123; FS=&quot;:&quot; &#125; &#123; print $NF &#125;&#x27; /etc/passwd 内置变量的使用 123456789#打印出最近登陆用户名并打印出当前行数和字段数[Windus@study ~]$ last -n 5 | awk &#x27;&#123;print $1 &quot;\\t lines:&quot; NR &quot;\\t columns:&quot; NF&#125;&#x27;root lines:1 columns:10root lines:2 columns:10root lines:3 columns:10root lines:4 columns:10root lines:5 columns:10 lines:6 columns:0wtmp lines:7 columns:7 逻辑运算符的使用 12345#打印出/etc/passwd文件内第3列小于10的第1列和第3列(注意第1行没有处理)[Windus@JD ~]$ cat /etc/passwd | awk &#x27;&#123;FS=&quot;:&quot;&#125; $3&lt;10 &#123;print $1 &quot;\\t&quot; $3&#125;&#x27;root:x:0:0:root:/root:/bin/bashbin 1daemon 2 正则运算符的使用 123456#打印出系统进程第一行和包含&quot;nginx&quot;字符串的进程[Windus@study ~]$ ps -ef| awk &#x27;NR == 1 &#123;print $0&#125; $0 ~ &quot;nginx&quot; &#123;print $0&#125;&#x27;UID PID PPID C STIME TTY TIME CMDroot 7871 7486 0 17:08 pts/0 00:00:00 awk NR == 1 &#123;print $0&#125; $0 ~ &quot;nginx&quot; &#123;print $0&#125;root 10535 1 0 Mar23 ? 00:00:00 nginx: master process nginxroot 10536 10535 0 Mar23 ? 00:00:10 nginx: worker process 关键字的使用 12345#打印出/etc/passwd文件内第3列小于10的第1列和第3列(第1行也被处理)[Windus@study ~]$ cat /etc/passwd | awk &#x27;BEGIN &#123;FS=&quot;:&quot;&#125; $3&lt;10 &#123;print $1 &quot;\\t&quot; $3&#125;&#x27;root 0bin 1daemon 2 awk设置FS变量后，但却仅能从第二行开始生效，所以通过BEGIN关键字来实现从第一行生效，同理也可使用END关键字处理结束后动作。 123456#利用END关键字计算总行数[Windus@study ~]$ cat /etc/passwd | awk &#x27;BEGIN &#123;FS=&quot;:&quot;;total=0&#125; $3&lt;10 &#123;print $1 &quot;\\t&quot; $3;total=total+1&#125; END &#123;printf &quot;总行数：%2d\\n&quot;,total&#125;&#x27;root 0bin 1daemon 2总行数： 3 动作内if()&#123;&#125;else&#123;&#125;条件 12345[Windus@study ~]$ cat /etc/passwd | awk &#x27;BEGIN &#123;FS=&quot;:&quot;;total=0&#125; &#123;if($3&lt;10)&#123; print $1 &quot;\\t&quot; $3;total=total+1&#125;&#125; END &#123;printf &quot;总行数：%2d\\n&quot;,total&#125;&#x27;root 0bin 1daemon 2总行数： 3 awk使用注意事项：1、所有&#123;&#125;内的awk动作，如果存在多个指令时可用;号间隔;或者使用换行来间隔。2、使用printf格式化输出时，必须加上\\n才能换行。3、与bash变量不同，awk中的变量可以直接使用，不需要使用$符号。4、awk动作&#123;&#125;内也支持if条件 高级用法流程控制 条件判断 123456if(表达式) &#123;语句1&#125;else if(表达式) &#123;语句2&#125;else &#123;语句3&#125; while循环 123456while(表达式) &#123;语句&#125; do&#123;语句&#125; while(条件) for循环 格式一1234567891011121314for(变量 in 数组) &#123;语句&#125; #示例：循环打印ENVIRON(awk内置变量)数组[Windus@study ~]$ awk &#x27;BEGIN&#123; for(k in ENVIRON)&#123; print k&quot;=&quot;ENVIRON[k]; &#125;&#125;&#x27;AWKPATH=.:/usr/share/awkLANG=en_US.UTF-8HISTSIZE=1000XDG_RUNTIME_DIR=/run/user/0 格式二 12345678910111213for(变量;条件;表达式) &#123;语句&#125;#示例：求十以内数相加的和awk &#x27;BEGIN&#123;total=0;for(i=0;i&lt;=10;i++)&#123; total+=i;&#125;print total;&#125;&#x27;55 break 当 break 语句用于 while 或 for 语句时，导致退出程序循环。continue 当 continue 语句用于 while 或 for 语句时，使程序循环移动到下一个迭代。exit 语句使主输入循环退出并将控制转移到END,如果END存在的话。如果没有定义END规则，或在END中应用exit语句，则终止脚本的执行 数组 awk中数组叫做关联数组(associative arrays)，因为数组索引（下标）可以是数字和字符串。awk 中的数组不必提前声明，也不必声明大小。根据上下文，数组元素可以用0或空字符串来初始化。因为数组是关联数组，所以通过for…in输出默认是无序的，如果需要得到有序数组，需要通过下标获得。 1234567# 索引下标colors[1]=&quot;red&quot;colors[2]=&quot;white&quot;# 字符串下标arr[&quot;name&quot;]=&quot;Windus&quot;arr[&quot;birth&quot;]=&quot;1990&quot; 内置函数 awk有很多内置函数，主要分为3类：算数函数、字符串函数、时间函数、其它一般函数。 字符串函数 index(str1,str2)函数在由 str1 参数指定的字符串（其中有出现 str2 指定的参数）中，返回位置，从 1 开始编号。如果 str2 参数不在 str1 参数中出现，则返回 0（零） 123[Windus@study ~]$ awk &#x27;BEGIN&#123;info=&quot;abcedfg&quot;;print index(info,&quot;ce&quot;)?&quot;exist&quot;:&quot;not exist&quot;;&#125;&#x27;exist length(str)函数返回 str 参数指定的字符串的长度（字符形式）。如果未给出 String 参数，则返回整个记录的长度（$0 记录变量）。 substr(str,M,[N])函数返回str的从M开始(M从1开始)，往后截取N个字符串;如果N不存在，则截取到末尾。 更多字符串函数包括match(str,Ere)、split(str,[Ere])、tolower(str)、toupper(str)等等，请查阅相关文档。 时间函数 systime()函数得到时间戳,返回从1970年1月1日开始到当前时间(不计闰年)的整秒数。 mktime( YYYY MM dd HH MM ss[ DST])函数生成时间格式 strftime([format [, timestamp]])函数格式化时间输出，将时间戳转为时间字符串。 格式 说明 a b %a 星期几的缩写(Sun) %A 星期几的完整写法(Sunday) %b 月名的缩写(Oct) %B 月名的完整写法(October) %c 本地日期和时间 %d 十进制日期 %D 日期 08/20/99 %e 日期，如果只有一位会补上一个空格 %H 用十进制表示24小时格式的小时 %I 用十进制表示12小时格式的小时 %j 从1月1日起一年中的第几天 %m 十进制表示的月份 %M 十进制表示的分钟 %p 12小时表示法(AM/PM) %S 十进制表示的秒 %U 十进制表示的一年中的第几个星期(星期天作为一个星期的开始) %w 十进制表示的星期几(星期天是0) %W 十进制表示的一年中的第几个星期(星期一作为一个星期的开始) %x 重新设置本地日期(08/20/99) %X 重新设置本地时间(12：00：00) %y 两位数字表示的年(99) %Y 当前月份 %Z 时区(PDT) %% 百分号(%) 其他用法 next语句next 在循环匹配时，如果遇到next，就会跳过当前行，而进行下一行匹配。 123456#遇到偶数行调用next跳过，只打印奇数行[Windus@study ~]$ awk -F: &#x27;NR%2==0&#123;next&#125;&#123;printf NR &quot;\\t&quot; $1 &quot;\\n&quot;&#125;&#x27; /etc/passwd1 root3 daemon5 lp……省略 getline函数输出重定向需用到 getline 函数。getline 从标准输入、管道或者当前正在处理的文件之外的其他输入文件获得输入。它负责从输入获得下一行的内容，并给NF,NR和FNR等内建变量赋值。如果得到一条记录，getline函数返回1，如果到达文件的末尾就返回0，如果出现错误，例如打开文件失败，就返回-1。 当其左右无重定向符 | 或 &lt; 时：getline 作用于当前文件，读入当前文件的第一行给其后跟的变量 var 或 $0（无变量），应该注意到，由于 awk 在处理 getline 之前已经读入了一行，所以 getline 得到的返回结果是隔行的。 当其左右有重定向符 | 或 &lt; 时：getline 则作用于定向输入文件，由于该文件是刚打开，并没有被 awk 读入一行，只是 getline 读入，那么 getline 返回的是该文件的第一行，而不是隔行。 12345# 执行date命令并通过管道输出给getline，然后再赋值给变量d，最后打印出变量d[Windus@study ~]$ awk &#x27;BEGIN&#123;&quot;date&quot; | getline d;print d&#125;&#x27;# 循环使getline从ls的输出中读取一行，并把它打印到屏幕。[Windus@study ~]$ awk &#x27;BEGIN&#123; while( &quot;ls&quot; | getline) print &#125;&#x27; 重定向到文件awk中允许用如下方式将结果输出到一个文件。 123echo | awk &#x27;&#123;printf(&quot;hello word!n&quot;) &gt; &quot;datafile&quot;&#125;&#x27;或echo | awk &#x27;&#123;printf(&quot;hello word!n&quot;) &gt;&gt; &quot;datafile&quot;&#125;&#x27; 扩展 print与printf的区别 1、print是ksh的内置命令，而printf是bash的内置命令2、print 中不能使用%s ,%d 或%c；3、print 自动换行，printf 没有自动换行。","categories":[],"tags":[{"name":"管线","slug":"管线","permalink":"http://man.fcwalkers.com/tags/%E7%AE%A1%E7%BA%BF/"},{"name":"分割","slug":"分割","permalink":"http://man.fcwalkers.com/tags/%E5%88%86%E5%89%B2/"},{"name":"撷取","slug":"撷取","permalink":"http://man.fcwalkers.com/tags/%E6%92%B7%E5%8F%96/"}]}]}